    <script>
        // Global variables
        let allDataSets = {};
        let electionData = [];
        let selectedRegions = [];
        let selectedDataTypes = [];
        let charts = {};
        let showComparison = false;
        let cumulativeMode = false;
        let overlayMode = false;
        let overlaySelections = {};
        let showPoliticalAnalysis = false;

        // Selector configurations based on bracketed headers from data_samples_headers.ref
        const selectorConfigs = {
            'us-states': [
                { key: 'date', label: 'Date', type: 'select' },
                { key: 'state', label: 'State', type: 'select' }
            ],
            'us-counties': [
                { key: 'date', label: 'Date', type: 'select' },
                { key: 'county', label: 'County', type: 'select' },
                { key: 'state', label: 'State', type: 'select' }
            ],
            'colleges': [
                { key: 'date', label: 'Date', type: 'select' },
                { key: 'state', label: 'State', type: 'select' },
                { key: 'county', label: 'County', type: 'select' },
                { key: 'city', label: 'City', type: 'select' },
                { key: 'college', label: 'College', type: 'select' }
            ],
            'prisons-facilities': [
                { key: 'facility_name', label: 'Facility Name', type: 'select' },
                { key: 'facility_type', label: 'Facility Type', type: 'select' },
                { key: 'facility_city', label: 'Facility City', type: 'select' },
                { key: 'facility_county', label: 'Facility County', type: 'select' },
                { key: 'facility_state', label: 'Facility State', type: 'select' }
            ],
            'prisons-systems': [
                { key: 'system', label: 'System', type: 'select' }
            ],
            'excess-deaths': [
                { key: 'country', label: 'Country', type: 'select' },
                { key: 'placename', label: 'Place Name', type: 'select' },
                { key: 'frequency', label: 'Frequency', type: 'select' },
                { key: 'start_date', label: 'Start Date', type: 'select' },
                { key: 'end_date', label: 'End Date', type: 'select' },
                { key: 'year', label: 'Year', type: 'select' },
                { key: 'month', label: 'Month', type: 'select' },
                { key: 'week', label: 'Week', type: 'select' }
            ],
            'mask-use': [
                { key: 'COUNTYFP', label: 'County FIPS', type: 'select' }
            ]
        };

        function createDynamicSelectors(dataType) {
            const selectorsRow = document.getElementById('selectorsRow');
            const config = selectorConfigs[dataType];
            
            if (!config) {
                selectorsRow.style.display = 'none';
                return;
            }

            selectorsRow.innerHTML = '';
            selectorsRow.style.display = 'flex';

            config.forEach(selector => {
                const controlItem = document.createElement('div');
                controlItem.className = 'control-item';
                
                const label = document.createElement('label');
                label.textContent = selector.label + ':';
                label.setAttribute('for', `selector_${selector.key}`);
                
                const select = document.createElement('select');
                select.id = `selector_${selector.key}`;
                select.onchange = () => updateDependentSelectors(dataType);
                
                const defaultOption = document.createElement('option');
                defaultOption.value = '';
                defaultOption.textContent = `Select ${selector.label}`;
                select.appendChild(defaultOption);
                
                controlItem.appendChild(label);
                controlItem.appendChild(select);
                selectorsRow.appendChild(controlItem);
            });
        }

        function populateDynamicSelectors(dataType) {
            const currentData = allDataSets[dataType];
            const config = selectorConfigs[dataType];
            
            if (!currentData || !config) return;

            config.forEach(selector => {
                const selectElement = document.getElementById(`selector_${selector.key}`);
                if (!selectElement) return;

                const values = [...new Set(currentData.map(d => d[selector.key]))].filter(Boolean).sort();
                
                // Clear existing options except the first one
                selectElement.innerHTML = selectElement.firstElementChild.outerHTML;
                
                values.forEach(value => {
                    const option = document.createElement('option');
                    option.value = value;
                    option.textContent = value;
                    selectElement.appendChild(option);
                });
            });
        }

        function updateDependentSelectors(dataType) {
            const currentData = allDataSets[dataType];
            const config = selectorConfigs[dataType];
            
            if (!currentData || !config) return;

            // Get current filter values
            const filters = {};
            config.forEach(selector => {
                const selectElement = document.getElementById(`selector_${selector.key}`);
                if (selectElement && selectElement.value) {
                    filters[selector.key] = selectElement.value;
                }
            });

            // Filter data based on current selections
            let filteredData = currentData;
            Object.keys(filters).forEach(key => {
                filteredData = filteredData.filter(d => d[key] === filters[key]);
            });

            // Update remaining selectors with filtered data
            config.forEach(selector => {
                if (!filters[selector.key]) {
                    const selectElement = document.getElementById(`selector_${selector.key}`);
                    if (selectElement) {
                        const currentValue = selectElement.value;
                        const values = [...new Set(filteredData.map(d => d[selector.key]))].filter(Boolean).sort();
                        
                        selectElement.innerHTML = selectElement.firstElementChild.outerHTML;
                        
                        values.forEach(value => {
                            const option = document.createElement('option');
                            option.value = value;
                            option.textContent = value;
                            selectElement.appendChild(option);
                        });
                        
                        if (values.includes(currentValue)) {
                            selectElement.value = currentValue;
                        }
                    }
                }
            });

            checkAddButtonState(dataType);
        }

        function checkAddButtonState(dataType) {
            const config = selectorConfigs[dataType];
            const addBtn = document.getElementById('addRegionBtn');
            
            if (!config) {
                addBtn.disabled = true;
                return;
            }

            let hasSelection = false;
            config.forEach(selector => {
                const selectElement = document.getElementById(`selector_${selector.key}`);
                if (selectElement && selectElement.value && selector.key !== 'date') {
                    hasSelection = true;
                }
            });

            addBtn.disabled = !hasSelection;
        }

        function getSelectedRegionLabel(dataType) {
            const config = selectorConfigs[dataType];
            if (!config) return '';

            const parts = [];
            config.forEach(selector => {
                const selectElement = document.getElementById(`selector_${selector.key}`);
                if (selectElement && selectElement.value && selector.key !== 'date') {
                    parts.push(selectElement.value);
                }
            });

            return parts.join(' - ') || 'Unknown Region';
        }

        // Political party colors
        const partyColors = {
            'DEMOCRAT': '#1e40af',
            'REPUBLICAN': '#dc2626',
            'LIBERTARIAN': '#fbbf24',
            'GREEN': '#10b981',
            'OTHER': '#9ca3af'
        };

        // Navigation functions
        function showPage(pageId) {
            document.querySelectorAll('.page').forEach(page => {
                page.classList.remove('active');
            });
            document.getElementById(pageId).classList.add('active');
        }
        async function loadData() {
            const dataType = document.getElementById('dataType').value;
            if (!dataType) return;

            // If we already have this data, just populate the select
            if (allDataSets[dataType]) {
                populateRegionSelect(dataType);
                enableControls();
                return;
            }

            showLoading(true);
            
            try {
                let csvFile = '';
                switch(dataType) {
                    case 'us-states':
                        csvFile = 'nytimes_covid-19-data/us-states.csv';
                        break;
                    case 'us-counties':
                        csvFile = 'nytimes_covid-19-data/us-counties-recent.csv';
                        break;
                    case 'colleges':
                        csvFile = 'nytimes_covid-19-data/colleges/colleges.csv';
                        break;
                    case 'prisons-facilities':
                        csvFile = 'nytimes_covid-19-data/prisons/facilities.csv';
                        break;
                    case 'prisons-systems':
                        csvFile = 'nytimes_covid-19-data/prisons/systems.csv';
                        break;
                    case 'excess-deaths':
                        csvFile = 'nytimes_covid-19-data/excess-deaths/deaths.csv';
                        break;
                    case 'mask-use':
                        csvFile = 'nytimes_covid-19-data/mask-use/mask-use-by-county.csv';
                        break;
                    default:
                        throw new Error('Unknown data type');
                }

                console.log('Loading CSV file:', csvFile);
                
                const response = await fetch(csvFile);
                if (!response.ok) {
                    throw new Error(`Failed to load ${csvFile}: ${response.statusText} (${response.status})`);
                }
                
                const csvText = await response.text();
                console.log(`CSV loaded (${csvText.length} characters), parsing...`);
                
                if (typeof Papa === 'undefined') {
                    throw new Error('Papa Parse library not loaded. Please check your internet connection.');
                }
                
                const parsedData = Papa.parse(csvText, {
                    header: true,
                    dynamicTyping: true,
                    skipEmptyLines: true
                });

                if (parsedData.errors.length > 0) {
                    console.warn('CSV parsing errors:', parsedData.errors);
                }

                const cleanData = parsedData.data.filter(row => {
                    return Object.values(row).some(value => value !== null && value !== '');
                });
                
                allDataSets[dataType] = cleanData;
                console.log(`Loaded ${cleanData.length} rows of ${dataType} data`);
                
                populateRegionSelect(dataType);
                enableControls();
                showLoading(false);
                
            } catch (error) {
                console.error('Error loading data:', error);
                showError(`Failed to load data: ${error.message}`);
                showLoading(false);
            }
        }

        function populateRegionSelect(dataType) {
            const regionSelect = document.getElementById('regionSelect');
            regionSelect.innerHTML = '<option value="">Select a region</option>';
            
            const currentData = allDataSets[dataType];
            if (!currentData) return;

            try {
                let regions = [];
                
                if (dataType === 'us-states') {
                    regions = [...new Set(currentData.map(d => d.state))].filter(Boolean).sort();
                } else if (dataType === 'us-counties') {
                    // Sort by state, then county
                    const countyData = [...new Set(currentData.map(d => `${d.state}||${d.county}`))].filter(Boolean);
                    regions = countyData.map(item => {
                        const [state, county] = item.split('||');
                        return { state, county, display: `${county}, ${state}` };
                    }).sort((a, b) => {
                        if (a.state !== b.state) return a.state.localeCompare(b.state);
                        return a.county.localeCompare(b.county);
                    }).map(item => item.display);
                } else if (dataType === 'colleges') {
                    // Sort by state, then college name
                    const collegeData = currentData.map(d => ({
                        state: d.state,
                        college: d.college,
                        display: `${d.college} (${d.state})`
                    })).filter(item => item.state && item.college)
                    .sort((a, b) => {
                        if (a.state !== b.state) return a.state.localeCompare(b.state);
                        return a.college.localeCompare(b.college);
                    });
                    regions = [...new Set(collegeData.map(item => item.display))];
                } else if (dataType === 'prisons-facilities') {
                    const facilityData = currentData.map(d => ({
                        state: d.facility_state,
                        facility: d.facility_name,
                        display: `${d.facility_name} (${d.facility_state})`
                    })).filter(item => item.state && item.facility)
                    .sort((a, b) => {
                        if (a.state !== b.state) return a.state.localeCompare(b.state);
                        return a.facility.localeCompare(b.facility);
                    });
                    regions = [...new Set(facilityData.map(item => item.display))];
                } else if (dataType === 'prisons-systems') {
                    regions = [...new Set(currentData.map(d => d.state || d.system))].filter(Boolean).sort();
                } else if (dataType === 'excess-deaths') {
                    regions = [...new Set(currentData.map(d => d.placename ? `${d.placename}, ${d.country}` : d.country))].filter(Boolean).sort();
                } else if (dataType === 'mask-use') {
                    const message = document.createElement('option');
                    message.value = '';
                    message.textContent = 'Mask use data shows county-level percentages by FIPS code';
                    regionSelect.appendChild(message);
                    return;
                }

                console.log(`Found ${regions.length} regions for ${dataType}`);

                regions.forEach(region => {
                    const option = document.createElement('option');
                    option.value = region;
                    option.textContent = region;
                    regionSelect.appendChild(option);
                });

                regionSelect.disabled = false;
                document.getElementById('addRegionBtn').disabled = false;
                
            } catch (error) {
                console.error('Error populating region select:', error);
                showError('Error loading region data');
            }
        }

        function enableControls() {
            document.getElementById('startDate').disabled = false;
            document.getElementById('endDate').disabled = false;
            document.getElementById('updateBtn').disabled = false;
        }

        function addRegion() {
            const regionSelect = document.getElementById('regionSelect');
            const selectedRegion = regionSelect.value;
            const dataType = document.getElementById('dataType').value;

            if (selectedRegion && !selectedRegions.includes(selectedRegion)) {
                selectedRegions.push(selectedRegion);
                selectedDataTypes.push(dataType);
                updateRegionTags();
                updateOverlayControls();
                updatePoliticalSummary();
                updateCharts();
                
                // Enable comparison controls
                document.getElementById('comparisonBtn').disabled = false;
                document.getElementById('chartModeBtn').disabled = false;
                
                regionSelect.value = '';
            }
        }

        function removeRegion(region) {
            const index = selectedRegions.indexOf(region);
            if (index > -1) {
                selectedRegions.splice(index, 1);
                selectedDataTypes.splice(index, 1);
            }
            updateRegionTags();
            updateOverlayControls();
            updatePoliticalSummary();
            updateCharts();
            
            if (selectedRegions.length === 0) {
                document.getElementById('comparisonBtn').disabled = true;
                document.getElementById('chartModeBtn').disabled = true;
                document.getElementById('comparisonTable').style.display = 'none';
                document.getElementById('overlayControls').classList.remove('visible');
            }
        }

        function clearRegions() {
            selectedRegions = [];
            selectedDataTypes = [];
            overlaySelections = {};
            updateRegionTags();
            updateOverlayControls();
            updatePoliticalSummary();
            clearCharts();
            document.getElementById('comparisonBtn').disabled = true;
            document.getElementById('chartModeBtn').disabled = true;
            document.getElementById('comparisonTable').style.display = 'none';
            document.getElementById('overlayControls').classList.remove('visible');
        }

        // Get political data for a region
        function getRegionPoliticalData(region, dataType) {
            if (!showPoliticalAnalysis || electionData.length === 0) return null;
            
            try {
                if (dataType === 'us-states') {
                    // Match by state name
                    return electionData.filter(d => d.state.toUpperCase() === region.toUpperCase());
                } else if (dataType === 'us-counties') {
                    // Parse "County, State" format
                    const [county, state] = region.split(', ');
                    if (!county || !state) return null;
                    
                    return electionData.filter(d => 
                        d.state.toUpperCase() === state.toUpperCase() && 
                        d.county_name === county || (d.county_name === "Miami-Dade" && county === "Miami Dade") || (d.county_name === "Miami Dade" && county === "Miami-Dade")
                    );
                }
            } catch (error) {
                console.warn('Error getting political data for region:', region, error);
            }
            
            return null;
        }

        // Aggregate political data by party
        function aggregatePoliticalData(politicalData) {
            if (!politicalData || politicalData.length === 0) {
                return { partyTotals: {}, totalVotes: 0, winner: 'Unknown' };
            }

            const partyTotals = {};
            let totalVotes = 0;

            politicalData.forEach(record => {
                const party = record.party || 'OTHER';
                const votes = record.candidatevotes || 0;
                
                if (!partyTotals[party]) {
                    partyTotals[party] = 0;
                }
                partyTotals[party] += votes;
                totalVotes = Math.max(totalVotes, record.totalvotes || 0);
            });

            // Determine winner
            let winner = 'Unknown';
            let maxVotes = 0;
            Object.keys(partyTotals).forEach(party => {
                if (partyTotals[party] > maxVotes) {
                    maxVotes = partyTotals[party];
                    winner = party;
                }
            });

            return { partyTotals, totalVotes, winner };
        }

        function updateRegionTags() {
            const tagsContainer = document.getElementById('regionTags');
            
            if (selectedRegions.length === 0) {
                tagsContainer.innerHTML = '<p>No regions selected</p>';
                return;
            }

            tagsContainer.innerHTML = selectedRegions.map((region, index) => {
                const dataType = selectedDataTypes[index];
                const dataTypeLabel = dataType.replace('-', ' ');
                
                let politicalInfo = '';
                if (showPoliticalAnalysis && (dataType === 'us-states' || dataType === 'us-counties')) {
                    const politicalData = getRegionPoliticalData(region, dataType);
                    if (politicalData) {
                        const { winner, partyTotals, totalVotes } = aggregatePoliticalData(politicalData);
                        const demVotes = partyTotals['DEMOCRAT'] || 0;
                        const repVotes = partyTotals['REPUBLICAN'] || 0;
                        
                        if (totalVotes > 0) {
                            const demPct = ((demVotes / totalVotes) * 100).toFixed(0);
                            const repPct = ((repVotes / totalVotes) * 100).toFixed(0);
                            const winnerClass = winner === 'DEMOCRAT' ? 'democrat' : winner === 'REPUBLICAN' ? 'republican' : '';
                            politicalInfo = `<span class="political-info ${winnerClass}">D:${demPct}% R:${repPct}%</span>`;
                        }
                    }
                }
                
                return `<span class="region-tag">
                    ${region}
                    <span class="data-type">[${dataTypeLabel}]</span>
                    ${politicalInfo}
                    <span class="remove-region" onclick="removeRegion('${region.replace(/'/g, "\\'")}')">×</span>
                </span>`;
            }).join('');
        }

        function updatePoliticalSummary() {
            const summaryContainer = document.getElementById('politicalSummary');
            const statsContainer = document.getElementById('politicalStats');
            
            if (!showPoliticalAnalysis) {
                summaryContainer.style.display = 'none';
                return;
            }

            // Check if we have any US regions selected
            const usRegions = selectedRegions.filter((region, index) => {
                const dataType = selectedDataTypes[index];
                return dataType === 'us-states' || dataType === 'us-counties';
            });

            if (usRegions.length === 0) {
                summaryContainer.style.display = 'none';
                return;
            }

            // Aggregate political data across all US regions
            let totalDemVotes = 0;
            let totalRepVotes = 0;
            let totalVotes = 0;
            let demWins = 0;
            let repWins = 0;
            let regionsWithData = 0;

            usRegions.forEach((region, index) => {
                const dataType = selectedDataTypes[selectedRegions.indexOf(region)];
                const politicalData = getRegionPoliticalData(region, dataType);
                
                if (politicalData && politicalData.length > 0) {
                    const { partyTotals, totalVotes: regionTotal, winner } = aggregatePoliticalData(politicalData);
                    
                    totalDemVotes += partyTotals['DEMOCRAT'] || 0;
                    totalRepVotes += partyTotals['REPUBLICAN'] || 0;
                    totalVotes += regionTotal;
                    
                    if (winner === 'DEMOCRAT') demWins++;
                    else if (winner === 'REPUBLICAN') repWins++;
                    
                    regionsWithData++;
                }
            });

            if (regionsWithData === 0) {
                summaryContainer.style.display = 'none';
                return;
            }

            const demPct = totalVotes > 0 ? ((totalDemVotes / totalVotes) * 100).toFixed(1) : 0;
            const repPct = totalVotes > 0 ? ((totalRepVotes / totalVotes) * 100).toFixed(1) : 0;
            const otherPct = totalVotes > 0 ? (((totalVotes - totalDemVotes - totalRepVotes) / totalVotes) * 100).toFixed(1) : 0;

            statsContainer.innerHTML = `
                <div class="political-stat-card democrat">
                    <div class="political-stat-value democrat">${demPct}%</div>
                    <div class="political-stat-label">Democrat Vote Share</div>
                </div>
                <div class="political-stat-card republican">
                    <div class="political-stat-value republican">${repPct}%</div>
                    <div class="political-stat-label">Republican Vote Share</div>
                </div>
                <div class="political-stat-card">
                    <div class="political-stat-value">${otherPct}%</div>
                    <div class="political-stat-label">Other Parties</div>
                </div>
                <div class="political-stat-card">
                    <div class="political-stat-value">${demWins}/${repWins}</div>
                    <div class="political-stat-label">Dem/Rep Wins</div>
                </div>
                <div class="political-stat-card">
                    <div class="political-stat-value">${totalVotes.toLocaleString()}</div>
                    <div class="political-stat-label">Total Votes</div>
                </div>
                <div class="political-stat-card">
                    <div class="political-stat-value">${regionsWithData}/${usRegions.length}</div>
                    <div class="political-stat-label">Regions w/ Data</div>
                </div>
            `;

            summaryContainer.style.display = 'block';
        }

        // Rest of the existing functions (updateOverlayControls, toggleComparisonMode, etc.)
        function updateOverlayControls() {
            const overlayControls = document.getElementById('overlayControls');
            const overlayOptions = document.getElementById('overlayOptions');
            
            // Check if we have mixed data types
            const uniqueDataTypes = [...new Set(selectedDataTypes)];
            
            if (uniqueDataTypes.length > 1 && selectedRegions.length > 0) {
                overlayControls.classList.add('visible');
                
                // Generate overlay options for each data type
                overlayOptions.innerHTML = '';
                
                uniqueDataTypes.forEach(dataType => {
                    const group = document.createElement('div');
                    group.className = 'overlay-group';
                    
                    const title = document.createElement('h4');
                    title.textContent = dataType.replace('-', ' ').toUpperCase();
                    group.appendChild(title);
                    
                    // Get available data fields for this data type
                    const dataFields = getDataFieldsForType(dataType);
                    
                    dataFields.forEach(field => {
                        const checkbox = document.createElement('div');
                        checkbox.className = 'overlay-checkbox';
                        
                        const input = document.createElement('input');
                        input.type = 'checkbox';
                        input.id = `overlay-${dataType}-${field.key}`;
                        input.checked = overlaySelections[`${dataType}-${field.key}`] || false;
                        input.onchange = () => {
                            overlaySelections[`${dataType}-${field.key}`] = input.checked;
                        };
                        
                        const label = document.createElement('label');
                        label.htmlFor = input.id;
                        label.textContent = field.label;
                        
                        checkbox.appendChild(input);
                        checkbox.appendChild(label);
                        group.appendChild(checkbox);
                    });
                    
                    overlayOptions.appendChild(group);
                });
            } else {
                overlayControls.classList.remove('visible');
            }
        }

        function getDataFieldsForType(dataType) {
            const fieldMappings = {
                'us-states': [
                    { key: 'cases', label: 'Cases' },
                    { key: 'deaths', label: 'Deaths' }
                ],
                'us-counties': [
                    { key: 'cases', label: 'Cases' },
                    { key: 'deaths', label: 'Deaths' }
                ],
                'colleges': [
                    { key: 'cases', label: 'Total Cases' },
                    { key: 'cases_2021', label: '2021 Cases' }
                ],
                'prisons-facilities': [
                    { key: 'inmate_cases', label: 'Inmate Cases' },
                    { key: 'officer_cases', label: 'Officer Cases' },
                    { key: 'inmate_deaths', label: 'Inmate Deaths' },
                    { key: 'officer_deaths', label: 'Officer Deaths' }
                ],
                'prisons-systems': [
                    { key: 'inmate_cases', label: 'Inmate Cases' },
                    { key: 'officer_cases', label: 'Officer Cases' },
                    { key: 'inmate_deaths', label: 'Inmate Deaths' },
                    { key: 'officer_deaths', label: 'Officer Deaths' }
                ],
                'excess-deaths': [
                    { key: 'excess_deaths', label: 'Excess Deaths' },
                    { key: 'expected_deaths', label: 'Expected Deaths' }
                ]
            };
            
            return fieldMappings[dataType] || [];
        }

        function toggleComparisonMode() {
            showComparison = !showComparison;
            const btn = document.getElementById('comparisonBtn');
            const table = document.getElementById('comparisonTable');
            
            if (showComparison) {
                btn.textContent = 'Hide Comparison Table';
                btn.classList.add('active');
                generateComparisonTable();
                table.style.display = 'block';
            } else {
                btn.textContent = 'Show Comparison Table';
                btn.classList.remove('active');
                table.style.display = 'none';
            }
        }

        function toggleChartMode() {
            cumulativeMode = !cumulativeMode;
            const btn = document.getElementById('chartModeBtn');
            
            if (cumulativeMode) {
                btn.textContent = 'Individual View';
                btn.classList.add('active');
            } else {
                btn.textContent = 'Cumulative View';
                btn.classList.remove('active');
            }
            
            updateCharts();
        }

        function updateOverlayCharts() {
            overlayMode = true;
            updateCharts();
        }

        function generateComparisonTable() {
            const table = document.getElementById('comparisonTable');
            
            let tableHTML = '<table><thead><tr><th>Region</th><th>Type</th><th>Cases/Data</th><th>Deaths/Info</th>';
            
            // Add political columns if political analysis is enabled
            if (showPoliticalAnalysis) {
                tableHTML += '<th>Political Winner</th><th>Dem %</th><th>Rep %</th>';
            }
            
            tableHTML += '<th>Additional Info</th></tr></thead><tbody>';
            
            selectedRegions.forEach((region, index) => {
                const dataType = selectedDataTypes[index];
                const regionData = getRegionData(region, dataType);
                
                if (regionData.length > 0) {
                    tableHTML += '<tr>';
                    tableHTML += `<td>${region}</td>`;
                    tableHTML += `<td>${dataType.replace('-', ' ')}</td>`;
                    
                    if (dataType === 'us-states' || dataType === 'us-counties') {
                        const latestData = regionData[regionData.length - 1];
                        const cases = latestData.cases || 0;
                        const deaths = latestData.deaths || 0;
                        const cfr = cases > 0 ? ((deaths / cases) * 100).toFixed(2) : 0;
                        
                        tableHTML += `<td>${cases.toLocaleString()}</td>`;
                        tableHTML += `<td>${deaths.toLocaleString()}</td>`;
                        
                        // Add political data if enabled
                        if (showPoliticalAnalysis) {
                            const politicalData = getRegionPoliticalData(region, dataType);
                            if (politicalData) {
                                const { winner, partyTotals, totalVotes } = aggregatePoliticalData(politicalData);
                                const demPct = totalVotes > 0 ? ((partyTotals['DEMOCRAT'] || 0) / totalVotes * 100).toFixed(1) : 0;
                                const repPct = totalVotes > 0 ? ((partyTotals['REPUBLICAN'] || 0) / totalVotes * 100).toFixed(1) : 0;
                                const winnerDisplay = winner === 'DEMOCRAT' ? 'Democrat' : winner === 'REPUBLICAN' ? 'Republican' : winner;
                                
                                tableHTML += `<td>${winnerDisplay}</td>`;
                                tableHTML += `<td>${demPct}%</td>`;
                                tableHTML += `<td>${repPct}%</td>`;
                            } else {
                                tableHTML += `<td>No data</td><td>-</td><td>-</td>`;
                            }
                        }
                        
                        tableHTML += `<td>CFR: ${cfr}% | Date: ${latestData.date || 'N/A'}</td>`;
                    } else {
                        // Handle other data types
                        if (dataType === 'colleges') {
                            const data = regionData[0];
                            tableHTML += `<td>${(data.cases || 0).toLocaleString()}</td>`;
                            tableHTML += `<td>${(data.cases_2021 || 0).toLocaleString()}</td>`;
                            if (showPoliticalAnalysis) tableHTML += `<td colspan="3">N/A</td>`;
                            tableHTML += `<td>State: ${data.state || 'N/A'}</td>`;
                        } else if (dataType.startsWith('prisons')) {
                            const data = regionData[0];
                            const totalCases = (data.total_inmate_cases || 0) + (data.total_officer_cases || 0);
                            const totalDeaths = (data.total_inmate_deaths || 0) + (data.total_officer_deaths || 0);
                            tableHTML += `<td>${totalCases.toLocaleString()}</td>`;
                            tableHTML += `<td>${totalDeaths.toLocaleString()}</td>`;
                            if (showPoliticalAnalysis) tableHTML += `<td colspan="3">N/A</td>`;
                            tableHTML += `<td>Pop: ${data.latest_inmate_population || data.max_inmate_population_2020 || 'N/A'}</td>`;
                        } else {
                            tableHTML += `<td>N/A</td><td>N/A</td>`;
                            if (showPoliticalAnalysis) tableHTML += `<td colspan="3">N/A</td>`;
                            tableHTML += `<td>N/A</td>`;
                        }
                    }
                    
                    tableHTML += '</tr>';
                }
            });
            
            tableHTML += '</tbody></table>';
            table.innerHTML = tableHTML;
        }

        function updateCharts() {
            if (selectedRegions.length === 0) {
                document.getElementById('chartsContainer').style.display = 'none';
                document.getElementById('statsGrid').style.display = 'none';
                return;
            }

            generateStatistics();
            generateCharts();
            document.getElementById('chartsContainer').style.display = 'grid';
            document.getElementById('statsGrid').style.display = 'grid';
        }

        function generateStatistics() {
            const statsGrid = document.getElementById('statsGrid');
            
            let totalCases = 0;
            let totalDeaths = 0;
            let additionalStats = {};

            selectedRegions.forEach((region, index) => {
                const dataType = selectedDataTypes[index];
                const regionData = getRegionData(region, dataType);
                
                if (regionData.length > 0) {
                    if (dataType === 'us-states' || dataType === 'us-counties') {
                        const latestData = regionData[regionData.length - 1];
                        totalCases += latestData.cases || 0;
                        totalDeaths += latestData.deaths || 0;
                    } else if (dataType === 'colleges') {
                        const data = regionData[0];
                        totalCases += data.cases || 0;
                        additionalStats.cases2021 = (additionalStats.cases2021 || 0) + (data.cases_2021 || 0);
                    } else if (dataType.startsWith('prisons')) {
                        const data = regionData[0];
                        totalCases += (data.total_inmate_cases || 0) + (data.total_officer_cases || 0);
                        totalDeaths += (data.total_inmate_deaths || 0) + (data.total_officer_deaths || 0);
                    } else if (dataType === 'excess-deaths') {
                        regionData.forEach(d => {
                            additionalStats.excessDeaths = (additionalStats.excessDeaths || 0) + (d.excess_deaths || 0);
                            additionalStats.expectedDeaths = (additionalStats.expectedDeaths || 0) + (d.expected_deaths || 0);
                        });
                    }
                }
            });

            let statsHTML = `
                <div class="stat-card">
                    <div class="stat-value">${totalCases.toLocaleString()}</div>
                    <div class="stat-label">Total Cases/Data Points</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value">${totalDeaths.toLocaleString()}</div>
                    <div class="stat-label">Total Deaths/Secondary Data</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value">${selectedRegions.length}</div>
                    <div class="stat-label">Regions Selected</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value">${new Set(selectedDataTypes).size}</div>
                    <div class="stat-label">Data Types</div>
                </div>
            `;

            statsGrid.innerHTML = statsHTML;
        }

        function generateCharts() {
            clearCharts();
            const chartsContainer = document.getElementById('chartsContainer');
            chartsContainer.innerHTML = '';

            // Check if we have mixed data types and overlay mode is enabled
            const uniqueDataTypes = [...new Set(selectedDataTypes)];
            
            if (uniqueDataTypes.length > 1 && overlayMode && Object.keys(overlaySelections).some(key => overlaySelections[key])) {
                createOverlayChart();
                overlayMode = false; // Reset overlay mode after creating chart
            } else {
                // Group regions by data type for better visualization
                const dataTypeGroups = {};
                selectedRegions.forEach((region, index) => {
                    const dataType = selectedDataTypes[index];
                    if (!dataTypeGroups[dataType]) {
                        dataTypeGroups[dataType] = [];
                    }
                    dataTypeGroups[dataType].push(region);
                });

                // Create charts for each data type group
                Object.keys(dataTypeGroups).forEach(dataType => {
                    if (dataType === 'us-states' || dataType === 'us-counties') {
                        createTimeSeriesChart(`${dataType}-cases`, `${dataType} - Cases Over Time`, 'cases', dataTypeGroups[dataType], dataType);
                        createTimeSeriesChart(`${dataType}-deaths`, `${dataType} - Deaths Over Time`, 'deaths', dataTypeGroups[dataType], dataType);
                        
                        // Add political chart if enabled
                        if (showPoliticalAnalysis) {
                            createPoliticalChart(`${dataType}-political`, `${dataType} - Political Breakdown`, dataTypeGroups[dataType], dataType);
                        }
                    } else {
                        createBarChart(`${dataType}-comparison`, `${dataType} - Comparison`, 'cases', dataTypeGroups[dataType], dataType);
                    }
                });

                // If we have mixed data types, create a normalized comparison
                if (uniqueDataTypes.length > 1) {
                    createMixedComparisonChart();
                }
            }
        }

        function createPoliticalChart(chartId, title, regions, dataType) {
            const chartsContainer = document.getElementById('chartsContainer');
            
            const chartPanel = document.createElement('div');
            chartPanel.className = 'chart-panel';
            chartPanel.innerHTML = `
                <h3>${title}</h3>
                <div class="chart-container">
                    <canvas id="${chartId}"></canvas>
                </div>
            `;
            chartsContainer.appendChild(chartPanel);

            const ctx = document.getElementById(chartId).getContext('2d');
            
            const demData = [];
            const repData = [];
            const labels = [];

            regions.forEach(region => {
                const politicalData = getRegionPoliticalData(region, dataType);
                if (politicalData) {
                    const { partyTotals, totalVotes } = aggregatePoliticalData(politicalData);
                    
                    const demPct = totalVotes > 0 ? ((partyTotals['DEMOCRAT'] || 0) / totalVotes) * 100 : 0;
                    const repPct = totalVotes > 0 ? ((partyTotals['REPUBLICAN'] || 0) / totalVotes) * 100 : 0;
                    
                    demData.push(demPct);
                    repData.push(repPct);
                    
                    // Shorten label for display
                    let label = region;
                    if (dataType === 'us-counties') {
                        label = region.split(', ')[0]; // Just county name
                    }
                    labels.push(label.length > 15 ? label.substring(0, 15) + '...' : label);
                }
            });

            if (labels.length === 0) {
                chartPanel.innerHTML = `<h3>${title}</h3><p style="color: #ff6b6b; text-align: center; padding: 2rem;">No political data available for selected regions</p>`;
                return;
            }

            const chartConfig = {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: [
                        {
                            label: 'Democrat',
                            data: demData,
                            backgroundColor: partyColors['DEMOCRAT'],
                            borderColor: partyColors['DEMOCRAT'],
                            borderWidth: 1
                        },
                        {
                            label: 'Republican',
                            data: repData,
                            backgroundColor: partyColors['REPUBLICAN'],
                            borderColor: partyColors['REPUBLICAN'],
                            borderWidth: 1
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            labels: { 
                                color: '#ffffff',
                                padding: 20
                            }
                        },
                        tooltip: {
                            backgroundColor: 'rgba(0, 0, 0, 0.8)',
                            titleColor: '#ffffff',
                            bodyColor: '#ffffff',
                            borderColor: '#1e3a8a',
                            borderWidth: 1,
                            callbacks: {
                                label: function(context) {
                                    return `${context.dataset.label}: ${context.parsed.y.toFixed(1)}%`;
                                }
                            }
                        }
                    },
                    scales: {
                        x: {
                            ticks: { color: '#ffffff' },
                            grid: { color: '#333333' }
                        },
                        y: {
                            ticks: { 
                                color: '#ffffff',
                                callback: function(value) {
                                    return value + '%';
                                }
                            },
                            grid: { color: '#333333' },
                            title: {
                                display: true,
                                text: 'Vote Percentage (2020 Election)',
                                color: '#ffffff'
                            },
                            max: 100
                        }
                    }
                }
            };

            try {
                charts[chartId] = new Chart(ctx, chartConfig);
                console.log(`Political chart ${chartId} created successfully`);
            } catch (error) {
                console.error('Error creating political chart:', error);
                chartPanel.innerHTML = `<h3>${title}</h3><p style="color: #ff6b6b; text-align: center; padding: 2rem;">Error creating chart: ${error.message}</p>`;
            }
        }

        // Keep all existing chart creation functions (createTimeSeriesChart, createBarChart, etc.)
        function createTimeSeriesChart(chartId, title, dataField, regions, dataType) {
            const chartsContainer = document.getElementById('chartsContainer');
            
            const chartPanel = document.createElement('div');
            chartPanel.className = 'chart-panel';
            chartPanel.innerHTML = `
                <h3>${title}</h3>
                <div class="chart-container">
                    <canvas id="${chartId}"></canvas>
                </div>
            `;
            chartsContainer.appendChild(chartPanel);

            const ctx = document.getElementById(chartId).getContext('2d');
            
            const datasets = regions.map((region, index) => {
                const regionData = getRegionData(region, dataType);
                const colors = ['#3b82f6', '#ef4444', '#10b981', '#f59e0b', '#8b5cf6', '#ec4899', '#14b8a6', '#f97316'];
                const color = colors[index % colors.length];

                const startDate = document.getElementById('startDate').value;
                const endDate = document.getElementById('endDate').value;
                
                let filteredData = regionData;
                if (startDate && endDate) {
                    filteredData = regionData.filter(d => {
                        const recordDate = new Date(d.date);
                        return recordDate >= new Date(startDate) && recordDate <= new Date(endDate);
                    });
                }
                
                let chartData;
                if (cumulativeMode) {
                    chartData = filteredData.map(d => ({ 
                        x: d.date, 
                        y: d[dataField] || 0 
                    }));
                } else {
                    chartData = [];
                    for (let i = 1; i < filteredData.length; i++) {
                        const current = filteredData[i][dataField] || 0;
                        const previous = filteredData[i-1][dataField] || 0;
                        const daily = Math.max(0, current - previous);
                        chartData.push({
                            x: filteredData[i].date,
                            y: daily
                        });
                    }
                }
                
                chartData = chartData.filter(d => d.x);

                return {
                    label: region.length > 40 ? region.substring(0, 40) + '...' : region,
                    data: chartData,
                    borderColor: color,
                    backgroundColor: color + '33',
                    tension: 0.1,
                    pointRadius: 2,
                    fill: false
                };
            });

            const chartConfig = {
                type: 'line',
                data: { datasets },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    interaction: {
                        intersect: false,
                        mode: 'index'
                    },
                    plugins: {
                        legend: {
                            labels: { 
                                color: '#ffffff',
                                usePointStyle: true,
                                padding: 20
                            }
                        },
                        tooltip: {
                            backgroundColor: 'rgba(0, 0, 0, 0.8)',
                            titleColor: '#ffffff',
                            bodyColor: '#ffffff',
                            borderColor: '#1e3a8a',
                            borderWidth: 1
                        }
                    },
                    scales: {
                        x: {
                            type: 'time',
                            time: {
                                unit: 'day',
                                displayFormats: {
                                    day: 'MMM dd, yyyy'
                                }
                            },
                            ticks: { 
                                color: '#ffffff',
                                maxTicksLimit: 10
                            },
                            grid: { color: '#333333' },
                            title: {
                                display: true,
                                text: 'Date',
                                color: '#ffffff'
                            }
                        },
                        y: {
                            ticks: { 
                                color: '#ffffff',
                                callback: function(value) {
                                    return value.toLocaleString();
                                }
                            },
                            grid: { color: '#333333' },
                            title: {
                                display: true,
                                text: cumulativeMode ? `Cumulative ${dataField}` : `Daily New ${dataField}`,
                                color: '#ffffff'
                            }
                        }
                    }
                }
            };

            try {
                charts[chartId] = new Chart(ctx, chartConfig);
                console.log(`Chart ${chartId} created successfully`);
            } catch (error) {
                console.error('Error creating chart:', error);
                chartPanel.innerHTML = `<h3>${title}</h3><p style="color: #ff6b6b; text-align: center; padding: 2rem;">Error creating chart: ${error.message}</p>`;
            }
        }

        function createBarChart(chartId, title, dataField, regions, dataType) {
            const chartsContainer = document.getElementById('chartsContainer');
            
            const chartPanel = document.createElement('div');
            chartPanel.className = 'chart-panel';
            chartPanel.innerHTML = `
                <h3>${title}</h3>
                <div class="chart-container">
                    <canvas id="${chartId}"></canvas>
                </div>
            `;
            chartsContainer.appendChild(chartPanel);

            const ctx = document.getElementById(chartId).getContext('2d');
            
            const datasets = regions.map((region, index) => {
                const regionData = getRegionData(region, dataType);
                const colors = ['#3b82f6', '#ef4444', '#10b981', '#f59e0b', '#8b5cf6', '#ec4899', '#14b8a6', '#f97316'];
                const color = colors[index % colors.length];

                let value = 0;
                if (regionData.length > 0) {
                    const data = regionData[0];
                    if (dataType === 'colleges') {
                        value = data.cases || 0;
                    } else if (dataType.startsWith('prisons')) {
                        value = (data.total_inmate_cases || 0) + (data.total_officer_cases || 0);
                    }
                }

                return {
                    label: region.length > 30 ? region.substring(0, 30) + '...' : region,
                    data: [value],
                    backgroundColor: color,
                    borderColor: color,
                    borderWidth: 1
                };
            });

            const chartConfig = {
                type: 'bar',
                data: {
                    labels: ['Cases'],
                    datasets: datasets
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            labels: { 
                                color: '#ffffff',
                                padding: 20
                            }
                        },
                        tooltip: {
                            backgroundColor: 'rgba(0, 0, 0, 0.8)',
                            titleColor: '#ffffff',
                            bodyColor: '#ffffff',
                            borderColor: '#1e3a8a',
                            borderWidth: 1
                        }
                    },
                    scales: {
                        x: {
                            ticks: { color: '#ffffff' },
                            grid: { color: '#333333' }
                        },
                        y: {
                            ticks: { 
                                color: '#ffffff',
                                callback: function(value) {
                                    return value.toLocaleString();
                                }
                            },
                            grid: { color: '#333333' },
                            title: {
                                display: true,
                                text: 'Total Cases',
                                color: '#ffffff'
                            }
                        }
                    }
                }
            };

            try {
                charts[chartId] = new Chart(ctx, chartConfig);
                console.log(`Chart ${chartId} created successfully`);
            } catch (error) {
                console.error('Error creating chart:', error);
                chartPanel.innerHTML = `<h3>${title}</h3><p style="color: #ff6b6b; text-align: center; padding: 2rem;">Error creating chart: ${error.message}</p>`;
            }
        }

        function createMixedComparisonChart() {
            const chartsContainer = document.getElementById('chartsContainer');
            
            const chartPanel = document.createElement('div');
            chartPanel.className = 'chart-panel';
            chartPanel.innerHTML = `
                <h3>Mixed Data Types - Normalized Comparison</h3>
                <div class="chart-container">
                    <canvas id="mixed-comparison"></canvas>
                </div>
            `;
            chartsContainer.appendChild(chartPanel);

            const ctx = document.getElementById('mixed-comparison').getContext('2d');
            
            const datasets = selectedRegions.map((region, index) => {
                const dataType = selectedDataTypes[index];
                const regionData = getRegionData(region, dataType);
                const colors = ['#3b82f6', '#ef4444', '#10b981', '#f59e0b', '#8b5cf6', '#ec4899', '#14b8a6', '#f97316'];
                const color = colors[index % colors.length];

                let value = 0;
                if (regionData.length > 0) {
                    if (dataType === 'us-states' || dataType === 'us-counties') {
                        const latestData = regionData[regionData.length - 1];
                        value = latestData.cases || 0;
                    } else if (dataType === 'colleges') {
                        value = regionData[0].cases || 0;
                    } else if (dataType.startsWith('prisons')) {
                        const data = regionData[0];
                        value = (data.total_inmate_cases || 0) + (data.total_officer_cases || 0);
                    }
                }

                return {
                    label: `${region} [${dataType.replace('-', ' ')}]`,
                    data: [value],
                    backgroundColor: color,
                    borderColor: color,
                    borderWidth: 1
                };
            });

            const chartConfig = {
                type: 'bar',
                data: {
                    labels: ['Total Cases'],
                    datasets: datasets
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            labels: { 
                                color: '#ffffff',
                                padding: 20
                            }
                        },
                        tooltip: {
                            backgroundColor: 'rgba(0, 0, 0, 0.8)',
                            titleColor: '#ffffff',
                            bodyColor: '#ffffff',
                            borderColor: '#1e3a8a',
                            borderWidth: 1
                        }
                    },
                    scales: {
                        x: {
                            ticks: { color: '#ffffff' },
                            grid: { color: '#333333' }
                        },
                        y: {
                            type: 'logarithmic',
                            ticks: { 
                                color: '#ffffff',
                                callback: function(value) {
                                    return value.toLocaleString();
                                }
                            },
                            grid: { color: '#333333' },
                            title: {
                                display: true,
                                text: 'Total Cases (Log Scale)',
                                color: '#ffffff'
                            }
                        }
                    }
                }
            };

            try {
                charts['mixed-comparison'] = new Chart(ctx, chartConfig);
                console.log('Mixed comparison chart created successfully');
            } catch (error) {
                console.error('Error creating mixed comparison chart:', error);
                chartPanel.innerHTML = `<h3>Mixed Data Types - Normalized Comparison</h3><p style="color: #ff6b6b; text-align: center; padding: 2rem;">Error creating chart: ${error.message}</p>`;
            }
        }

        function createOverlayChart() {
            const chartsContainer = document.getElementById('chartsContainer');
            
            const chartPanel = document.createElement('div');
            chartPanel.className = 'chart-panel';
            chartPanel.innerHTML = `
                <h3>Custom Overlay Comparison</h3>
                <div class="chart-container">
                    <canvas id="overlay-chart"></canvas>
                </div>
            `;
            chartsContainer.appendChild(chartPanel);

            const ctx = document.getElementById('overlay-chart').getContext('2d');
            
            const datasets = [];
            const colors = ['#3b82f6', '#ef4444', '#10b981', '#f59e0b', '#8b5cf6', '#ec4899', '#14b8a6', '#f97316'];
            let colorIndex = 0;

            selectedRegions.forEach((region, regionIndex) => {
                const dataType = selectedDataTypes[regionIndex];
                const regionData = getRegionData(region, dataType);
                
                // Check which data fields are selected for this data type
                const dataFields = getDataFieldsForType(dataType);
                
                dataFields.forEach(field => {
                    const selectionKey = `${dataType}-${field.key}`;
                    if (overlaySelections[selectionKey]) {
                        const color = colors[colorIndex % colors.length];
                        colorIndex++;
                        
                        let value = 0;
                        if (regionData.length > 0) {
                            const data = regionData[0];
                            if (field.key === 'cases') {
                                value = data.cases || 0;
                            } else if (field.key === 'deaths') {
                                value = data.deaths || 0;
                            } else if (field.key === 'cases_2021') {
                                value = data.cases_2021 || 0;
                            } else if (field.key === 'inmate_cases') {
                                value = data.total_inmate_cases || 0;
                            } else if (field.key === 'officer_cases') {
                                value = data.total_officer_cases || 0;
                            } else if (field.key === 'inmate_deaths') {
                                value = data.total_inmate_deaths || 0;
                            } else if (field.key === 'officer_deaths') {
                                value = data.total_officer_deaths || 0;
                            } else if (field.key === 'excess_deaths') {
                                value = regionData.reduce((sum, d) => sum + (d.excess_deaths || 0), 0);
                            } else if (field.key === 'expected_deaths') {
                                value = regionData.reduce((sum, d) => sum + (d.expected_deaths || 0), 0);
                            }
                        }

                        datasets.push({
                            label: `${region} - ${field.label}`,
                            data: [value],
                            backgroundColor: color,
                            borderColor: color,
                            borderWidth: 1
                        });
                    }
                });
            });

            const chartConfig = {
                type: 'bar',
                data: {
                    labels: ['Selected Data Points'],
                    datasets: datasets
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            labels: { 
                                color: '#ffffff',
                                padding: 20
                            }
                        },
                        tooltip: {
                            backgroundColor: 'rgba(0, 0, 0, 0.8)',
                            titleColor: '#ffffff',
                            bodyColor: '#ffffff',
                            borderColor: '#1e3a8a',
                            borderWidth: 1
                        }
                    },
                    scales: {
                        x: {
                            ticks: { color: '#ffffff' },
                            grid: { color: '#333333' }
                        },
                        y: {
                            type: 'logarithmic',
                            ticks: { 
                                color: '#ffffff',
                                callback: function(value) {
                                    return value.toLocaleString();
                                }
                            },
                            grid: { color: '#333333' },
                            title: {
                                display: true,
                                text: 'Values (Log Scale)',
                                color: '#ffffff'
                            }
                        }
                    }
                }
            };

            try {
                charts['overlay-chart'] = new Chart(ctx, chartConfig);
                console.log('Overlay chart created successfully');
            } catch (error) {
                console.error('Error creating overlay chart:', error);
                chartPanel.innerHTML = `<h3>Custom Overlay Comparison</h3><p style="color: #ff6b6b; text-align: center; padding: 2rem;">Error creating chart: ${error.message}</p>`;
            }
        }

        function getRegionData(region, dataType) {
            const currentData = allDataSets[dataType];
            if (!currentData) return [];
            
            if (dataType === 'us-states') {
                return currentData.filter(d => d.state.toUpperCase() === region.toUpperCase()).sort((a, b) => new Date(a.date) - new Date(b.date));
            } else if (dataType === 'us-counties') {
                const [county, state] = region.split(', ');
                return currentData.filter(d => d.county === county && d.state.toUpperCase() === state.toUpperCase()).sort((a, b) => new Date(a.date) - new Date(b.date));
            } else if (dataType === 'colleges') {
                const collegeName = region.split(' (')[0];
                return currentData.filter(d => d.college === collegeName);
            } else if (dataType === 'prisons-facilities') {
                const facilityName = region.split(' (')[0];
                return currentData.filter(d => d.facility_name === facilityName);
            } else if (dataType === 'prisons-systems') {
                return currentData.filter(d => (d.state || d.system) === region);
            } else if (dataType === 'excess-deaths') {
                if (region.includes(', ')) {
                    const [place, country] = region.split(', ');
                    return currentData.filter(d => d.placename === place && d.country === country);
                } else {
                    return currentData.filter(d => d.country === region && !d.placename);
                }
            }
            
            return [];
        }

        function clearCharts() {
            Object.values(charts).forEach(chart => {
                try {
                    chart.destroy();
                } catch (e) {
                    console.warn('Error destroying chart:', e);
                }
            });
            charts = {};
        }

        function showError(message) {
            const container = document.querySelector('.container');
            const existingError = document.querySelector('.error');
            if (existingError) {
                existingError.remove();
            }
            
            const errorDiv = document.createElement('div');
            errorDiv.className = 'error';
            errorDiv.textContent = message;
            container.insertBefore(errorDiv, container.firstChild);
            
            setTimeout(() => {
                if (errorDiv.parentNode) {
                    errorDiv.remove();
                }
            }, 10000);
        }

        function showLoading(show) {
            document.getElementById('loadingIndicator').style.display = show ? 'block' : 'none';
        }

        // Initialize the application
        document.addEventListener('DOMContentLoaded', function() {
            console.log('COVID-19 Data Dashboard with Political Integration initialized');
            console.log('Libraries loaded:', {
                Chart: typeof Chart !== 'undefined',
                Papa: typeof Papa !== 'undefined'
            });
            
            // Set default date range
            const startDate = document.getElementById('startDate');
            const endDate = document.getElementById('endDate');
            startDate.value = '2020-03-01';
            endDate.value = '2023-03-23';
        });

        // Window resize handler for responsive charts
        window.addEventListener('resize', function() {
            Object.values(charts).forEach(chart => {
                try {
                    chart.resize();
                } catch (e) {
                    console.warn('Error resizing chart:', e);
                }
            });
        });

        // Updated loadData function to work with dynamic selectors
        async function loadData() {
            const dataType = document.getElementById('dataType').value;
            if (!dataType) {
                document.getElementById('selectorsRow').style.display = 'none';
                return;
            }

            if (allDataSets[dataType]) {
                createDynamicSelectors(dataType);
                populateDynamicSelectors(dataType);
                enableControls();
                return;
            }

            showLoading(true);
            
            try {
                let csvFile = '';
                switch(dataType) {
                    case 'us-states':
                        csvFile = 'nytimes_covid-19-data/us-states.csv';
                        break;
                    case 'us-counties':
                        csvFile = 'nytimes_covid-19-data/us-counties-recent.csv';
                        break;
                    case 'colleges':
                        csvFile = 'nytimes_covid-19-data/colleges/colleges.csv';
                        break;
                    case 'prisons-facilities':
                        csvFile = 'nytimes_covid-19-data/prisons/facilities.csv';
                        break;
                    case 'prisons-systems':
                        csvFile = 'nytimes_covid-19-data/prisons/systems.csv';
                        break;
                    case 'excess-deaths':
                        csvFile = 'nytimes_covid-19-data/excess-deaths/deaths.csv';
                        break;
                    case 'mask-use':
                        csvFile = 'nytimes_covid-19-data/mask-use/mask-use-by-county.csv';
                        break;
                    default:
                        throw new Error('Unknown data type');
                }

                const response = await fetch(csvFile);
                if (!response.ok) {
                    throw new Error(`Failed to load ${csvFile}: ${response.statusText} (${response.status})`);
                }
                
                const csvText = await response.text();
                const parsedData = Papa.parse(csvText, {
                    header: true,
                    dynamicTyping: true,
                    skipEmptyLines: true
                });

                const cleanData = parsedData.data.filter(row => {
                    return Object.values(row).some(value => value !== null && value !== '');
                });
                
                allDataSets[dataType] = cleanData;
                
                createDynamicSelectors(dataType);
                populateDynamicSelectors(dataType);
                enableControls();
                showLoading(false);
                
            } catch (error) {
                console.error('Error loading data:', error);
                showError(`Failed to load data: ${error.message}`);
                showLoading(false);
            }
        }

        // Updated addRegion function
        function addRegion() {
            const dataType = document.getElementById('dataType').value;
            if (!dataType) return;

            const regionLabel = getSelectedRegionLabel(dataType);
            if (!regionLabel || regionLabel === 'Unknown Region') return;

            if (!selectedRegions.includes(regionLabel)) {
                selectedRegions.push(regionLabel);
                selectedDataTypes.push(dataType);
                updateRegionTags();
                updateOverlayControls();
                updatePoliticalSummary();
                updateCharts();
                
                document.getElementById('comparisonBtn').disabled = false;
                document.getElementById('chartModeBtn').disabled = false;
                
                // Clear selections
                const config = selectorConfigs[dataType];
                if (config) {
                    config.forEach(selector => {
                        const selectElement = document.getElementById(`selector_${selector.key}`);
                        if (selectElement) {
                            selectElement.value = '';
                        }
                    });
                }
                checkAddButtonState(dataType);
            }
        }
    </script>
</body>
</html>
