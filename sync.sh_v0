#!/bin/bash

# COVID Elections Project - Universal Sync Script
# Syncs from osprey.darkremy to bataleon web server
# Version: Final - Replaces all previous scripts

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_status() { echo -e "${BLUE}[INFO]${NC} $1"; }
print_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
print_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
print_error() { echo -e "${RED}[ERROR]${NC} $1"; }

# Configuration
PROJECT_DIR="/Users/raymond/covid_elections"
WEB_HOST="bataleon"
WEB_USER="raymond"
WEB_PATH="/var/www/html/covid_elections"

# Parse command line arguments
QUICK_MODE=false
DASHBOARD_ONLY=false
NO_BACKUP=false
FORCE_MODE=false

show_usage() {
    echo "COVID Elections Sync Script"
    echo ""
    echo "Usage: $0 [OPTIONS]"
    echo ""
    echo "Options:"
    echo "  -q, --quick         Quick sync (dashboard only)"
    echo "  -d, --dashboard     Dashboard file only"
    echo "  -n, --no-backup     Skip backup creation"
    echo "  -f, --force         Force sync without confirmation"
    echo "  -h, --help          Show this help"
    echo ""
    echo "Examples:"
    echo "  $0                  # Full sync with backup"
    echo "  $0 -q               # Quick dashboard-only sync"
    echo "  $0 -f               # Force full sync without prompts"
    echo "  $0 -d -n            # Dashboard only, no backup"
}

while [[ $# -gt 0 ]]; do
    case $1 in
        -q|--quick) QUICK_MODE=true; DASHBOARD_ONLY=true; shift ;;
        -d|--dashboard) DASHBOARD_ONLY=true; shift ;;
        -n|--no-backup) NO_BACKUP=true; shift ;;
        -f|--force) FORCE_MODE=true; shift ;;
        -h|--help) show_usage; exit 0 ;;
        *) print_error "Unknown option: $1"; show_usage; exit 1 ;;
    esac
done

echo "============================================="
echo "COVID Elections Project Sync"
echo "============================================="
echo ""

# Environment check
if [ ! -d "$PROJECT_DIR" ]; then
    print_error "Project directory not found: $PROJECT_DIR"
    exit 1
fi

cd "$PROJECT_DIR"

# Connection test
print_status "Testing connection to $WEB_HOST..."
if ! ssh -o ConnectTimeout=5 -o BatchMode=yes "${WEB_USER}@${WEB_HOST}" exit 2>/dev/null; then
    print_error "Cannot connect to $WEB_HOST"
    exit 1
fi
print_success "Connected to $WEB_HOST"

# Show sync plan
if [ "$DASHBOARD_ONLY" = true ]; then
    print_status "Sync mode: Dashboard file only"
else
    print_status "Sync mode: Full project sync"
fi

echo "  Source: $(pwd)"
echo "  Target: ${WEB_USER}@${WEB_HOST}:${WEB_PATH}"
echo "  Backup: $([ "$NO_BACKUP" = true ] && echo "Disabled" || echo "Enabled")"
echo ""

# Confirmation (unless forced or quick mode)
if [ "$FORCE_MODE" != true ] && [ "$QUICK_MODE" != true ]; then
    read -p "Proceed with sync? (y/N): " -r
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        print_warning "Sync cancelled"
        exit 0
    fi
fi

# Create backup
if [ "$NO_BACKUP" != true ]; then
    print_status "Creating backup..."
    BACKUP_NAME="covid_backup_$(date +%Y%m%d_%H%M%S)"
    ssh "${WEB_USER}@${WEB_HOST}" "
        if [ -d '${WEB_PATH}' ]; then
            sudo cp -r '${WEB_PATH}' '/tmp/${BACKUP_NAME}' 2>/dev/null || cp -r '${WEB_PATH}' '/tmp/${BACKUP_NAME}'
            echo 'Backup created: /tmp/${BACKUP_NAME}'
        fi
    " || print_warning "Backup creation had issues, continuing..."
fi

# Setup permissions
print_status "Setting up permissions..."
ssh "${WEB_USER}@${WEB_HOST}" "
    sudo mkdir -p '${WEB_PATH}' 2>/dev/null || mkdir -p '${WEB_PATH}'
    sudo chmod 775 '${WEB_PATH}' 2>/dev/null || chmod 775 '${WEB_PATH}' 2>/dev/null || true
    sudo usermod -a -G www-data raymond 2>/dev/null || true
" || print_warning "Permission setup had issues, continuing..."

# Sync files
if [ "$DASHBOARD_ONLY" = true ]; then
    print_status "Syncing dashboard file..."
    if [ ! -f "covid_dashboard.html" ]; then
        print_error "Dashboard file not found: covid_dashboard.html"
        exit 1
    fi
    
    rsync -avz --no-perms --no-times \
        covid_dashboard.html \
        "${WEB_USER}@${WEB_HOST}:${WEB_PATH}/" || {
        print_warning "Rsync failed, trying alternative method..."
        scp covid_dashboard.html "${WEB_USER}@${WEB_HOST}:/tmp/dashboard_new.html"
        ssh "${WEB_USER}@${WEB_HOST}" "
            sudo mv /tmp/dashboard_new.html '${WEB_PATH}/covid_dashboard.html' 2>/dev/null || \
                mv /tmp/dashboard_new.html '${WEB_PATH}/covid_dashboard.html'
        "
    }
else
    print_status "Syncing full project..."
    rsync -avz --delete --no-perms --no-times \
        --exclude='.git/' \
        --exclude='*.log' \
        --exclude='node_modules/' \
        --exclude='.env' \
        --exclude='*.sh' \
        --exclude='scripts_ran/' \
        --exclude='covid_dashboard.html_v*' \
        --exclude='retry_later' \
        "$PROJECT_DIR/" \
        "${WEB_USER}@${WEB_HOST}:${WEB_PATH}/" || {
        print_error "Full sync failed"
        exit 1
    }
fi

# Set final permissions
print_status "Setting final permissions..."
ssh "${WEB_USER}@${WEB_HOST}" "
    sudo chown -R www-data:www-data '${WEB_PATH}' 2>/dev/null || chown -R ${WEB_USER}:${WEB_USER} '${WEB_PATH}' 2>/dev/null || true
    sudo find '${WEB_PATH}' -type d -exec chmod 755 {} \; 2>/dev/null || find '${WEB_PATH}' -type d -exec chmod 755 {} \; 2>/dev/null || true
    sudo find '${WEB_PATH}' -type f -exec chmod 644 {} \; 2>/dev/null || find '${WEB_PATH}' -type f -exec chmod 644 {} \; 2>/dev/null || true
" || print_warning "Final permissions had issues, but files should still work"

# Verify deployment
print_status "Verifying deployment..."
ssh "${WEB_USER}@${WEB_HOST}" "
    echo 'Key files:'
    [ -f '${WEB_PATH}/covid_dashboard.html' ] && echo 'âœ“ Dashboard' || echo 'âœ— Dashboard missing'
    [ -f '${WEB_PATH}/index.html' ] && echo 'âœ“ Index' || echo 'âœ— Index missing'
    [ -d '${WEB_PATH}/nytimes_covid-19-data' ] && echo 'âœ“ Data directory' || echo 'âœ— Data directory missing'
    echo ''
    echo 'Directory size:' \$(du -sh '${WEB_PATH}' 2>/dev/null | cut -f1)
"

# Test web access
print_status "Testing web access..."
HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "http://${WEB_HOST}/covid_elections/" 2>/dev/null || echo "000")

case $HTTP_CODE in
    200|301|302) print_success "Web server responding (HTTP $HTTP_CODE)" ;;
    403) print_warning "Access forbidden (HTTP 403) - check permissions" ;;
    404) print_warning "Not found (HTTP 404) - check web server config" ;;
    *) print_warning "Unexpected response (HTTP $HTTP_CODE)" ;;
esac

print_success "Sync completed successfully!"
echo ""
print_status "Dashboard available at:"
echo "  http://${WEB_HOST}/covid_elections/"
echo "  http://${WEB_HOST}/covid_elections/covid_dashboard.html"
echo ""

if [ "$NO_BACKUP" != true ]; then
    print_status "Backup location: /tmp/${BACKUP_NAME:-latest_backup}"
fi

echo ""
print_success "ðŸš€ All done!"