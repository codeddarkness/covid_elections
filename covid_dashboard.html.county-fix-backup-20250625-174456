<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>COVID-19 Data Analysis Dashboard</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@3.9.1/dist/chart.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns@2.0.0/dist/chartjs-adapter-date-fns.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.4.1/papaparse.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #000000;
            color: #ffffff;
            line-height: 1.6;
            min-height: 100vh;
        }

        .header {
            background-color: #1a1a1a;
            padding: 1rem;
            border-bottom: 2px solid #1e3a8a;
            position: sticky;
            top: 0;
            z-index: 1000;
        }

        .header h1 {
            text-align: center;
            margin-bottom: 1rem;
            color: #ffffff;
        }

        .nav-menu {
            position: relative;
            display: inline-block;
            width: 100%;
        }

        .nav-dropdown {
            background-color: #1e3a8a;
            color: white;
            padding: 12px 20px;
            font-size: 16px;
            border: none;
            cursor: pointer;
            width: 100%;
            border-radius: 4px;
        }

        .nav-dropdown:hover {
            background-color: #1d4ed8;
        }

        .nav-content {
            display: none;
            position: absolute;
            background-color: #1a1a1a;
            min-width: 100%;
            box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.5);
            z-index: 1;
            border-radius: 4px;
            border: 1px solid #1e3a8a;
        }

        .nav-content a {
            color: white;
            padding: 12px 16px;
            text-decoration: none;
            display: block;
            transition: background-color 0.3s;
        }

        .nav-content a:hover {
            background-color: #1e3a8a;
        }

        .nav-menu:hover .nav-content {
            display: block;
        }

        .container {
            max-width: 100%;
            margin: 0 auto;
            padding: 2rem 1rem;
            min-height: calc(100vh - 100px);
        }

        .page {
            display: none;
        }

        .page.active {
            display: block;
        }

        .controls {
            background-color: #1a1a1a;
            padding: 1.5rem;
            margin-bottom: 2rem;
            border-radius: 8px;
            border: 1px solid #1e3a8a;
        }

        .controls-row {
            display: flex;
            flex-wrap: wrap;
            gap: 1rem;
            align-items: end;
            margin-bottom: 1rem;
        }

        .controls-row:last-child {
            margin-bottom: 0;
        }

        .control-item {
            flex: 1;
            min-width: 200px;
        }

        .control-item label {
            display: block;
            margin-bottom: 0.5rem;
            color: #ffffff;
            font-weight: 500;
            font-size: 14px;
        }

        .control-item select, .control-item input {
            width: 100%;
            padding: 0.5rem;
            background-color: #333333;
            color: #ffffff;
            border: 1px solid #1e3a8a;
            border-radius: 4px;
            font-size: 14px;
        }

        .control-item select:focus, .control-item input:focus {
            outline: none;
            border-color: #3b82f6;
            box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.3);
        }

        .control-item.button-item {
            flex: 0 0 auto;
            min-width: auto;
            display: flex;
            align-items: end;
        }

        .button {
            background-color: #1e3a8a;
            color: white;
            padding: 0.5rem 1rem;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
            transition: background-color 0.3s;
            white-space: nowrap;
        }

        .button:hover {
            background-color: #1d4ed8;
        }

        .button:disabled {
            background-color: #666666;
            cursor: not-allowed;
        }

        .button.active {
            background-color: #10b981;
        }

        .button.active:hover {
            background-color: #059669;
        }

        .selected-regions {
            background-color: #1a1a1a;
            padding: 1rem;
            margin-bottom: 2rem;
            border-radius: 8px;
            border: 1px solid #1e3a8a;
        }

        .regions-header {
            display: flex;
            flex-wrap: wrap;
            justify-content: space-between;
            align-items: center;
            gap: 1rem;
            margin-bottom: 1rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid #333333;
        }

        .regions-title {
            font-size: 16px;
            font-weight: 600;
            color: #ffffff;
            margin: 0;
        }

        .regions-controls {
            display: flex;
            gap: 0.5rem;
            flex-wrap: wrap;
        }

        .region-tag {
            display: inline-block;
            background-color: #1e3a8a;
            color: white;
            padding: 0.5rem 1rem;
            margin: 0.25rem;
            border-radius: 20px;
            font-size: 14px;
            position: relative;
        }

        .region-tag .data-type {
            font-size: 11px;
            opacity: 0.7;
            margin-left: 0.5rem;
        }

        .region-tag .political-info {
            font-size: 10px;
            opacity: 0.8;
            margin-left: 0.5rem;
            padding: 0.2rem 0.4rem;
            border-radius: 8px;
            background-color: rgba(255, 255, 255, 0.1);
        }

        .region-tag .political-info.democrat {
            background-color: rgba(30, 64, 175, 0.3);
            color: #93c5fd;
        }

        .region-tag .political-info.republican {
            background-color: rgba(220, 38, 38, 0.3);
            color: #fca5a5;
        }

        .remove-region {
            margin-left: 0.5rem;
            cursor: pointer;
            font-weight: bold;
        }

        .overlay-controls {
            background-color: #2a2a2a;
            padding: 1rem;
            margin-top: 1rem;
            border-radius: 8px;
            border: 1px solid #1e3a8a;
            display: none;
        }

        .overlay-controls.visible {
            display: block;
        }

        .overlay-title {
            font-size: 14px;
            font-weight: 600;
            color: #ffffff;
            margin-bottom: 1rem;
        }

        .overlay-options {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 1rem;
        }

        .overlay-group {
            background-color: #333333;
            padding: 1rem;
            border-radius: 4px;
            border: 1px solid #444444;
        }

        .overlay-group h4 {
            font-size: 12px;
            color: #cccccc;
            margin-bottom: 0.5rem;
            text-transform: uppercase;
        }

        .overlay-checkbox {
            display: flex;
            align-items: center;
            margin-bottom: 0.5rem;
        }

        .overlay-checkbox input[type="checkbox"] {
            margin-right: 0.5rem;
            transform: scale(1.2);
        }

        .overlay-checkbox label {
            font-size: 12px;
            color: #ffffff;
            cursor: pointer;
        }

        .charts-container {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(500px, 1fr));
            gap: 2rem;
            margin-bottom: 2rem;
        }

        .chart-panel {
            background-color: #1a1a1a;
            padding: 2rem;
            border-radius: 8px;
            border: 1px solid #1e3a8a;
        }

        .chart-panel h3 {
            margin-bottom: 1rem;
            color: #ffffff;
            text-align: center;
        }

        .chart-container {
            position: relative;
            height: 350px;
            width: 100%;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin-bottom: 2rem;
        }

        .stat-card {
            background-color: #1a1a1a;
            padding: 1.5rem;
            border-radius: 8px;
            border: 1px solid #1e3a8a;
            text-align: center;
        }

        .stat-value {
            font-size: 2rem;
            font-weight: bold;
            color: #3b82f6;
            margin-bottom: 0.5rem;
        }

        .stat-label {
            color: #cccccc;
            font-size: 0.9rem;
        }

        .comparison-table {
            background-color: #1a1a1a;
            border-radius: 8px;
            border: 1px solid #1e3a8a;
            margin-bottom: 2rem;
            overflow-x: auto;
        }

        .comparison-table table {
            width: 100%;
            border-collapse: collapse;
        }

        .comparison-table th,
        .comparison-table td {
            padding: 1rem;
            text-align: left;
            border-bottom: 1px solid #333333;
        }

        .comparison-table th {
            background-color: #1e3a8a;
            color: white;
            font-weight: 600;
        }

        .comparison-table tr:hover {
            background-color: #333333;
        }

        .loading {
            text-align: center;
            padding: 2rem;
            color: #cccccc;
        }

        .error {
            background-color: #dc2626;
            color: white;
            padding: 1rem;
            border-radius: 4px;
            margin: 1rem 0;
        }

        .info-section {
            background-color: #1a1a1a;
            padding: 2rem;
            margin-bottom: 2rem;
            border-radius: 8px;
            border: 1px solid #1e3a8a;
        }

        .info-section h2 {
            color: #3b82f6;
            margin-bottom: 1rem;
        }

        .info-section h3 {
            color: #ffffff;
            margin: 1.5rem 0 1rem 0;
        }

        .info-section p, .info-section li {
            margin-bottom: 0.5rem;
            color: #cccccc;
        }

        .info-section ul {
            margin-left: 2rem;
        }

        /* Political integration styles */
        .political-section {
            background-color: #2a1a3a;
            border: 1px solid #6366f1;
            margin-bottom: 2rem;
        }

        .political-stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 1rem;
            margin-bottom: 1rem;
        }

        .political-stat-card {
            background-color: #1a1a2e;
            padding: 1rem;
            border-radius: 6px;
            border: 1px solid #6366f1;
            text-align: center;
        }

        .political-stat-card.democrat {
            border-color: #1e40af;
            background-color: rgba(30, 64, 175, 0.1);
        }

        .political-stat-card.republican {
            border-color: #dc2626;
            background-color: rgba(220, 38, 38, 0.1);
        }

        .political-stat-value {
            font-size: 1.5rem;
            font-weight: bold;
            margin-bottom: 0.3rem;
        }

        .political-stat-value.democrat {
            color: #3b82f6;
        }

        .political-stat-value.republican {
            color: #ef4444;
        }

        .political-stat-label {
            color: #cccccc;
            font-size: 0.8rem;
        }

        /* Responsive design improvements */
        @media (max-width: 1200px) {
            .container {
                max-width: 100%;
                padding: 1rem;
            }
            
            .charts-container {
                grid-template-columns: 1fr;
            }
        }

        @media (max-width: 768px) {
            .controls-row {
                flex-direction: column;
            }

            .control-item {
                min-width: 100%;
            }

            .regions-header {
                flex-direction: column;
                align-items: flex-start;
            }

            .regions-controls {
                width: 100%;
                justify-content: flex-start;
            }

            .chart-panel {
                padding: 1rem;
            }

            .overlay-options {
                grid-template-columns: 1fr;
            }

            .stats-grid {
                grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            }

            .political-stats {
                grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
            }
        }

        @media (max-width: 600px) {
            .chart-container {
                height: 300px;
            }

            .button {
                padding: 0.4rem 0.8rem;
                font-size: 12px;
            }
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>COVID-19 Data Analysis Dashboard</h1>
        <div class="nav-menu">
            <button class="nav-dropdown">Navigation Menu</button>
            <div class="nav-content">
                <a href="#" onclick="showPage('dashboard')">Data Dashboard</a>
                <a href="election_dashboard.html">Election Data Dashboard</a>
                <a href="#" onclick="showPage('acknowledgments')">Acknowledgments</a>
                <a href="#" onclick="showPage('methodology')">Data Methodology</a>
            </div>
        </div>
    </div>

    <div class="container">
        <!-- Main Dashboard Page -->
        <div id="dashboard" class="page active">
            <div class="controls">
                <!-- First row: Data type, region selector, and add button -->
                <div class="controls-row">
                    <div class="control-item">
                        <label for="dataType">Data Type:</label>
                        <select id="dataType" onchange="loadData()">
                            <option value="">Select Data Type</option>
                            <option value="us-states">US States</option>
                            <option value="us-counties">US Counties (Recent)</option>
                            <option value="colleges">Colleges & Universities</option>
                            <option value="prisons-facilities">Prison Facilities</option>
                            <option value="prisons-systems">Prison Systems</option>
                            <option value="excess-deaths">Excess Deaths (Global)</option>
                            <option value="mask-use">Mask Use Survey</option>
                        </select>
                    </div>

                    <div class="control-item">
                        <label for="regionSelect">Select Region:</label>
                        <select id="regionSelect" disabled>
                            <option value="">Choose data type first</option>
                        </select>
                    </div>

                    <div class="control-item button-item">
                        <button class="button" onclick="addRegion()" id="addRegionBtn" disabled>Add Region</button>
                    </div>
                </div>

                <!-- Second row: Date range and update button -->
                <div class="controls-row">
                    <div class="control-item">
                        <label for="startDate">Start Date:</label>
                        <input type="date" id="startDate" disabled>
                    </div>

                    <div class="control-item">
                        <label for="endDate">End Date:</label>
                        <input type="date" id="endDate" disabled>
                    </div>

                    <div class="control-item button-item">
                        <button class="button" onclick="updateCharts()" id="updateBtn" disabled>Update Charts</button>
                    </div>
                </div>

                <!-- Third row: Political analysis toggle -->
                <div class="controls-row">
                    <div class="control-item">
                        <label for="showPolitical">
                            <input type="checkbox" id="showPolitical" onchange="togglePoliticalAnalysis()" style="margin-right: 0.5rem;">
                            Show Political Analysis (for US States/Counties)
                        </label>
                    </div>
                </div>
            </div>

            <div class="selected-regions">
                <!-- Compact header with controls -->
                <div class="regions-header">
                    <h3 class="regions-title">Selected Regions for Comparison:</h3>
                    <div class="regions-controls">
                        <button class="button" onclick="toggleComparisonMode()" id="comparisonBtn" disabled>Show Comparison Table</button>
                        <button class="button" onclick="toggleChartMode()" id="chartModeBtn" disabled>Cumulative View</button>
                        <button class="button" onclick="clearRegions()">Clear All</button>
                    </div>
                </div>

                <!-- Region tags -->
                <div id="regionTags">
                    <p>No regions selected</p>
                </div>

                <!-- Political summary for selected regions -->
                <div id="politicalSummary" class="political-section" style="display: none;">
                    <div class="regions-header">
                        <h3 class="regions-title">Political Makeup Summary (2020 Election):</h3>
                    </div>
                    <div id="politicalStats" class="political-stats">
                        <!-- Political stats will be generated here -->
                    </div>
                </div>

                <!-- Overlay data selector for mixed region types -->
                <div class="overlay-controls" id="overlayControls">
                    <div class="overlay-title">Select Data Points to Display (Mixed Region Types)</div>
                    <div class="overlay-options" id="overlayOptions">
                        <!-- Dynamic overlay options will be generated here -->
                    </div>
                    <div style="margin-top: 1rem;">
                        <button class="button" onclick="updateOverlayCharts()">Update Overlay View</button>
                    </div>
                </div>
            </div>

            <div class="comparison-table" id="comparisonTable" style="display: none;">
                <!-- Comparison table will be dynamically generated -->
            </div>

            <div class="stats-grid" id="statsGrid" style="display: none;">
                <!-- Stats cards will be dynamically generated -->
            </div>

            <div class="charts-container" id="chartsContainer" style="display: none;">
                <!-- Charts will be dynamically generated -->
            </div>

            <div class="loading" id="loadingIndicator" style="display: none;">
                Loading data...
            </div>
        </div>

        <!-- Acknowledgments Page -->
        <div id="acknowledgments" class="page">
            <div class="info-section">
                <h2>Acknowledgments</h2>
                <p>This dashboard integrates COVID-19 data collected by The New York Times with 2020 Presidential Election data from MIT Election Data and Science Lab. We extend our gratitude to all contributors and data sources.</p>
                
                <h3>COVID-19 Data Sources</h3>
                <ul>
                    <li><strong>Primary Data:</strong> The New York Times COVID-19 Data Repository</li>
                    <li><strong>US Cases and Deaths:</strong> State and local government health departments</li>
                    <li><strong>College Data:</strong> Survey of American colleges and universities</li>
                    <li><strong>Prison Data:</strong> State and federal prison systems, ICE, local jails</li>
                    <li><strong>Excess Deaths:</strong> National and municipal health departments, vital statistics offices</li>
                    <li><strong>Mask Usage:</strong> Dynata survey data</li>
                </ul>

                <h3>Election Data Sources</h3>
                <ul>
                    <li><strong>Primary Data:</strong> MIT Election Data and Science Lab (MEDSL)</li>
                    <li><strong>Data Package:</strong> PresElectionResults by jaytimm</li>
                    <li><strong>Source:</strong> Official state and local election authorities</li>
                    <li><strong>Coverage:</strong> 2020 Presidential Election results by county</li>
                </ul>

                <h3>Technical Acknowledgments</h3>
                <ul>
                    <li><strong>Visualization:</strong> Chart.js for interactive charts</li>
                    <li><strong>Data Processing:</strong> Papa Parse for CSV handling</li>
                    <li><strong>Design:</strong> Responsive design principles for mobile compatibility</li>
                    <li><strong>Integration:</strong> Cross-referencing COVID and political data by geographic region</li>
                </ul>

                <h3>License</h3>
                <p>The COVID-19 data is licensed under Creative Commons Attribution-NonCommercial 4.0 International license. The election data is provided for educational and research use. Both datasets are made publicly available for broad, noncommercial public use including by medical, public health, and political researchers.</p>
            </div>
        </div>

        <!-- Methodology Page -->
        <div id="methodology" class="page">
            <div class="info-section">
                <h2>Integrated Data Methodology and Analysis</h2>
                
                <h3>Data Integration Approach</h3>
                <p>This dashboard combines COVID-19 health data with 2020 Presidential Election results to enable analysis of pandemic impacts across different political contexts. Geographic matching is performed at the state and county level using standardized identifiers.</p>

                <h3>Geographic Matching</h3>
                <ul>
                    <li><strong>State Level:</strong> Direct name matching between COVID and election datasets</li>
                    <li><strong>County Level:</strong> Matching by county name and state combination</li>
                    <li><strong>FIPS Codes:</strong> Where available, Federal Information Processing Standards codes ensure accurate geographic alignment</li>
                    <li><strong>Data Quality:</strong> Manual verification of major metropolitan areas and edge cases</li>
                </ul>

                <h3>Political Analysis Features</h3>
                <ul>
                    <li><strong>Vote Share Calculation:</strong> Percentage of votes for major parties (Democrat/Republican) plus other parties</li>
                    <li><strong>Victory Margins:</strong> Difference between winning and runner-up candidates</li>
                    <li><strong>Regional Aggregation:</strong> Combined political metrics across multiple selected regions</li>
                    <li><strong>Temporal Correlation:</strong> COVID data trends overlaid with political context</li>
                </ul>

                <h3>COVID Data Methodology</h3>
                <p>The COVID-19 data collection follows The New York Times methodology with extensive journalistic verification across fragmented public health reporting systems.</p>
                
                <h3>Election Data Methodology</h3>
                <p>The 2020 Presidential Election data is sourced from MIT Election Data and Science Lab, aggregating official results from all 50 states and county-equivalent jurisdictions.</p>

                <h3>Analysis Limitations</h3>
                <ul>
                    <li><strong>Temporal Mismatch:</strong> Election data represents a snapshot from November 2020, while COVID data spans 2020-2023</li>
                    <li><strong>Causation vs Correlation:</strong> Political and health outcomes may be correlated but causation cannot be inferred</li>
                    <li><strong>Geographic Coverage:</strong> Some COVID regions may not have corresponding election data</li>
                    <li><strong>Demographic Factors:</strong> Political voting patterns and COVID impacts may both reflect underlying demographic, economic, and social factors</li>
                </ul>

                <h3>Research Applications</h3>
                <ul>
                    <li>Analysis of pandemic response effectiveness across different political contexts</li>
                    <li>Geographic correlation studies between voting patterns and health outcomes</li>
                    <li>Policy impact assessment across politically diverse regions</li>
                    <li>Public health communication effectiveness analysis</li>
                </ul>

                <h3>Data Updates</h3>
                <p><strong>Note:</strong> COVID-19 data collection ended March 24, 2023. Election data reflects final certified results from the 2020 Presidential Election. This integration serves as a historical analysis tool for understanding pandemic impacts in political context.</p>
            </div>
        </div>
    </div>

    <script>
        // Global variables
        let allDataSets = {};
        let electionData = [];
        let selectedRegions = [];
        let selectedDataTypes = [];
        let charts = {};
        let showComparison = false;
        let cumulativeMode = false;
        let overlayMode = false;
        let overlaySelections = {};
        let showPoliticalAnalysis = false;

        // Political party colors
        const partyColors = {
            'DEMOCRAT': '#1e40af',
            'REPUBLICAN': '#dc2626',
            'LIBERTARIAN': '#fbbf24',
            'GREEN': '#10b981',
            'OTHER': '#9ca3af'
        };

        // Navigation functions
        function showPage(pageId) {
            document.querySelectorAll('.page').forEach(page => {
                page.classList.remove('active');
            });
            document.getElementById(pageId).classList.add('active');
        }

        // Political analysis toggle
        function togglePoliticalAnalysis() {
            showPoliticalAnalysis = document.getElementById('showPolitical').checked;
            
            if (showPoliticalAnalysis && electionData.length === 0) {
                loadElectionData().then(() => {
                    updateRegionTags();
                    updatePoliticalSummary();
                    updateCharts();
                });
            } else {
                updateRegionTags();
                updatePoliticalSummary();
                updateCharts();
            }
        }

        // Election data loading
        async function loadElectionData() {
            if (electionData.length > 0) return; // Already loaded
            
            try {
                console.log('Loading election data for political analysis...');
                
                const response = await fetch('countypres_2020.csv');
                if (!response.ok) {
                    throw new Error(`Failed to load election data: ${response.statusText} (${response.status})`);
                }
                
                const csvText = await response.text();
                console.log(`Election CSV loaded (${csvText.length} characters), parsing...`);
                
                const parsedData = Papa.parse(csvText, {
                    header: true,
                    dynamicTyping: true,
                    skipEmptyLines: true
                });

                // Filter for TOTAL mode only to avoid duplicates
                electionData = parsedData.data.filter(row => {
                    return row.mode === 'TOTAL' && row.office === 'US PRESIDENT' && row.year === 2020;
                });
                
                console.log(`Loaded ${electionData.length} election records for political analysis`);
                
            } catch (error) {
                console.error('Error loading election data:', error);
                showError(`Failed to load election data for political analysis: ${error.message}`);
            }
        }

        // Data loading functions (existing COVID functionality)
        async function loadData() {
            const dataType = document.getElementById('dataType').value;
            if (!dataType) return;

            // If we already have this data, just populate the select
            if (allDataSets[dataType]) {
                populateRegionSelect(dataType);
                enableControls();
                return;
            }

            showLoading(true);
            
            try {
                let csvFile = '';
                switch(dataType) {
                    case 'us-states':
                        csvFile = 'nytimes_covid-19-data/us-states.csv';
                        break;
                    case 'us-counties':
                        csvFile = 'nytimes_covid-19-data/us-counties-recent.csv';
                        break;
                    case 'colleges':
                        csvFile = 'nytimes_covid-19-data/colleges/colleges.csv';
                        break;
                    case 'prisons-facilities':
                        csvFile = 'nytimes_covid-19-data/prisons/facilities.csv';
                        break;
                    case 'prisons-systems':
                        csvFile = 'nytimes_covid-19-data/prisons/systems.csv';
                        break;
                    case 'excess-deaths':
                        csvFile = 'nytimes_covid-19-data/excess-deaths/deaths.csv';
                        break;
                    case 'mask-use':
                        csvFile = 'nytimes_covid-19-data/mask-use/mask-use-by-county.csv';
                        break;
                    default:
                        throw new Error('Unknown data type');
                }

                console.log('Loading CSV file:', csvFile);
                
                const response = await fetch(csvFile);
                if (!response.ok) {
                    throw new Error(`Failed to load ${csvFile}: ${response.statusText} (${response.status})`);
                }
                
                const csvText = await response.text();
                console.log(`CSV loaded (${csvText.length} characters), parsing...`);
                
                if (typeof Papa === 'undefined') {
                    throw new Error('Papa Parse library not loaded. Please check your internet connection.');
                }
                
                const parsedData = Papa.parse(csvText, {
                    header: true,
                    dynamicTyping: true,
                    skipEmptyLines: true
                });

                if (parsedData.errors.length > 0) {
                    console.warn('CSV parsing errors:', parsedData.errors);
                }

                const cleanData = parsedData.data.filter(row => {
                    return Object.values(row).some(value => value !== null && value !== '');
                });
                
                allDataSets[dataType] = cleanData;
                console.log(`Loaded ${cleanData.length} rows of ${dataType} data`);
                
                populateRegionSelect(dataType);
                enableControls();
                showLoading(false);
                
            } catch (error) {
                console.error('Error loading data:', error);
                showError(`Failed to load data: ${error.message}`);
                showLoading(false);
            }
        }

        function populateRegionSelect(dataType) {
            const regionSelect = document.getElementById('regionSelect');
            regionSelect.innerHTML = '<option value="">Select a region</option>';
            
            const currentData = allDataSets[dataType];
            if (!currentData) return;

            try {
                let regions = [];
                
                if (dataType === 'us-states') {
                    regions = [...new Set(currentData.map(d => d.state))].filter(Boolean).sort();
                } else if (dataType === 'us-counties') {
                    // Sort by state, then county
                    const countyData = [...new Set(currentData.map(d => `${d.state}||${d.county}`))].filter(Boolean);
                    regions = countyData.map(item => {
                        const [state, county] = item.split('||');
                        return { state, county, display: `${county}, ${state}` };
                    }).sort((a, b) => {
                        if (a.state !== b.state) return a.state.localeCompare(b.state);
                        return a.county.localeCompare(b.county);
                    }).map(item => item.display);
                } else if (dataType === 'colleges') {
                    // Sort by state, then college name
                    const collegeData = currentData.map(d => ({
                        state: d.state,
                        college: d.college,
                        display: `${d.college} (${d.state})`
                    })).filter(item => item.state && item.college)
                    .sort((a, b) => {
                        if (a.state !== b.state) return a.state.localeCompare(b.state);
                        return a.college.localeCompare(b.college);
                    });
                    regions = [...new Set(collegeData.map(item => item.display))];
                } else if (dataType === 'prisons-facilities') {
                    const facilityData = currentData.map(d => ({
                        state: d.facility_state,
                        facility: d.facility_name,
                        display: `${d.facility_name} (${d.facility_state})`
                    })).filter(item => item.state && item.facility)
                    .sort((a, b) => {
                        if (a.state !== b.state) return a.state.localeCompare(b.state);
                        return a.facility.localeCompare(b.facility);
                    });
                    regions = [...new Set(facilityData.map(item => item.display))];
                } else if (dataType === 'prisons-systems') {
                    regions = [...new Set(currentData.map(d => d.state || d.system))].filter(Boolean).sort();
                } else if (dataType === 'excess-deaths') {
                    regions = [...new Set(currentData.map(d => d.placename ? `${d.placename}, ${d.country}` : d.country))].filter(Boolean).sort();
                } else if (dataType === 'mask-use') {
                    const message = document.createElement('option');
                    message.value = '';
                    message.textContent = 'Mask use data shows county-level percentages by FIPS code';
                    regionSelect.appendChild(message);
                    return;
                }

                console.log(`Found ${regions.length} regions for ${dataType}`);

                regions.forEach(region => {
                    const option = document.createElement('option');
                    option.value = region;
                    option.textContent = region;
                    regionSelect.appendChild(option);
                });

                regionSelect.disabled = false;
                document.getElementById('addRegionBtn').disabled = false;
                
            } catch (error) {
                console.error('Error populating region select:', error);
                showError('Error loading region data');
            }
        }

        function enableControls() {
            document.getElementById('startDate').disabled = false;
            document.getElementById('endDate').disabled = false;
            document.getElementById('updateBtn').disabled = false;
        }

        function addRegion() {
            const regionSelect = document.getElementById('regionSelect');
            const selectedRegion = regionSelect.value;
            const dataType = document.getElementById('dataType').value;

            if (selectedRegion && !selectedRegions.includes(selectedRegion)) {
                selectedRegions.push(selectedRegion);
                selectedDataTypes.push(dataType);
                updateRegionTags();
                updateOverlayControls();
                updatePoliticalSummary();
                updateCharts();
                
                // Enable comparison controls
                document.getElementById('comparisonBtn').disabled = false;
                document.getElementById('chartModeBtn').disabled = false;
                
                regionSelect.value = '';
            }
        }

        function removeRegion(region) {
            const index = selectedRegions.indexOf(region);
            if (index > -1) {
                selectedRegions.splice(index, 1);
                selectedDataTypes.splice(index, 1);
            }
            updateRegionTags();
            updateOverlayControls();
            updatePoliticalSummary();
            updateCharts();
            
            if (selectedRegions.length === 0) {
                document.getElementById('comparisonBtn').disabled = true;
                document.getElementById('chartModeBtn').disabled = true;
                document.getElementById('comparisonTable').style.display = 'none';
                document.getElementById('overlayControls').classList.remove('visible');
            }
        }

        function clearRegions() {
            selectedRegions = [];
            selectedDataTypes = [];
            overlaySelections = {};
            updateRegionTags();
            updateOverlayControls();
            updatePoliticalSummary();
            clearCharts();
            document.getElementById('comparisonBtn').disabled = true;
            document.getElementById('chartModeBtn').disabled = true;
            document.getElementById('comparisonTable').style.display = 'none';
            document.getElementById('overlayControls').classList.remove('visible');
        }

        // Get political data for a region
        function getRegionPoliticalData(region, dataType) {
            if (!showPoliticalAnalysis || electionData.length === 0) return null;
            
            try {
                if (dataType === 'us-states') {
                    // Match by state name
                    return electionData.filter(d => d.state === region);
                } else if (dataType === 'us-counties') {
                    // Parse "County, State" format
                    const [county, state] = region.split(', ');
                    if (!county || !state) return null;
                    
                    return electionData.filter(d => 
                        d.state === state && 
                        d.county_name === county
                    );
                }
            } catch (error) {
                console.warn('Error getting political data for region:', region, error);
            }
            
            return null;
        }

        // Aggregate political data by party
        function aggregatePoliticalData(politicalData) {
            if (!politicalData || politicalData.length === 0) {
                return { partyTotals: {}, totalVotes: 0, winner: 'Unknown' };
            }

            const partyTotals = {};
            let totalVotes = 0;

            politicalData.forEach(record => {
                const party = record.party || 'OTHER';
                const votes = record.candidatevotes || 0;
                
                if (!partyTotals[party]) {
                    partyTotals[party] = 0;
                }
                partyTotals[party] += votes;
                totalVotes = Math.max(totalVotes, record.totalvotes || 0);
            });

            // Determine winner
            let winner = 'Unknown';
            let maxVotes = 0;
            Object.keys(partyTotals).forEach(party => {
                if (partyTotals[party] > maxVotes) {
                    maxVotes = partyTotals[party];
                    winner = party;
                }
            });

            return { partyTotals, totalVotes, winner };
        }

        function updateRegionTags() {
            const tagsContainer = document.getElementById('regionTags');
            
            if (selectedRegions.length === 0) {
                tagsContainer.innerHTML = '<p>No regions selected</p>';
                return;
            }

            tagsContainer.innerHTML = selectedRegions.map((region, index) => {
                const dataType = selectedDataTypes[index];
                const dataTypeLabel = dataType.replace('-', ' ');
                
                let politicalInfo = '';
                if (showPoliticalAnalysis && (dataType === 'us-states' || dataType === 'us-counties')) {
                    const politicalData = getRegionPoliticalData(region, dataType);
                    if (politicalData) {
                        const { winner, partyTotals, totalVotes } = aggregatePoliticalData(politicalData);
                        const demVotes = partyTotals['DEMOCRAT'] || 0;
                        const repVotes = partyTotals['REPUBLICAN'] || 0;
                        
                        if (totalVotes > 0) {
                            const demPct = ((demVotes / totalVotes) * 100).toFixed(0);
                            const repPct = ((repVotes / totalVotes) * 100).toFixed(0);
                            const winnerClass = winner === 'DEMOCRAT' ? 'democrat' : winner === 'REPUBLICAN' ? 'republican' : '';
                            politicalInfo = `<span class="political-info ${winnerClass}">D:${demPct}% R:${repPct}%</span>`;
                        }
                    }
                }
                
                return `<span class="region-tag">
                    ${region}
                    <span class="data-type">[${dataTypeLabel}]</span>
                    ${politicalInfo}
                    <span class="remove-region" onclick="removeRegion('${region.replace(/'/g, "\\'")}')">×</span>
                </span>`;
            }).join('');
        }

        function updatePoliticalSummary() {
            const summaryContainer = document.getElementById('politicalSummary');
            const statsContainer = document.getElementById('politicalStats');
            
            if (!showPoliticalAnalysis) {
                summaryContainer.style.display = 'none';
                return;
            }

            // Check if we have any US regions selected
            const usRegions = selectedRegions.filter((region, index) => {
                const dataType = selectedDataTypes[index];
                return dataType === 'us-states' || dataType === 'us-counties';
            });

            if (usRegions.length === 0) {
                summaryContainer.style.display = 'none';
                return;
            }

            // Aggregate political data across all US regions
            let totalDemVotes = 0;
            let totalRepVotes = 0;
            let totalVotes = 0;
            let demWins = 0;
            let repWins = 0;
            let regionsWithData = 0;

            usRegions.forEach((region, index) => {
                const dataType = selectedDataTypes[selectedRegions.indexOf(region)];
                const politicalData = getRegionPoliticalData(region, dataType);
                
                if (politicalData && politicalData.length > 0) {
                    const { partyTotals, totalVotes: regionTotal, winner } = aggregatePoliticalData(politicalData);
                    
                    totalDemVotes += partyTotals['DEMOCRAT'] || 0;
                    totalRepVotes += partyTotals['REPUBLICAN'] || 0;
                    totalVotes += regionTotal;
                    
                    if (winner === 'DEMOCRAT') demWins++;
                    else if (winner === 'REPUBLICAN') repWins++;
                    
                    regionsWithData++;
                }
            });

            if (regionsWithData === 0) {
                summaryContainer.style.display = 'none';
                return;
            }

            const demPct = totalVotes > 0 ? ((totalDemVotes / totalVotes) * 100).toFixed(1) : 0;
            const repPct = totalVotes > 0 ? ((totalRepVotes / totalVotes) * 100).toFixed(1) : 0;
            const otherPct = totalVotes > 0 ? (((totalVotes - totalDemVotes - totalRepVotes) / totalVotes) * 100).toFixed(1) : 0;

            statsContainer.innerHTML = `
                <div class="political-stat-card democrat">
                    <div class="political-stat-value democrat">${demPct}%</div>
                    <div class="political-stat-label">Democrat Vote Share</div>
                </div>
                <div class="political-stat-card republican">
                    <div class="political-stat-value republican">${repPct}%</div>
                    <div class="political-stat-label">Republican Vote Share</div>
                </div>
                <div class="political-stat-card">
                    <div class="political-stat-value">${otherPct}%</div>
                    <div class="political-stat-label">Other Parties</div>
                </div>
                <div class="political-stat-card">
                    <div class="political-stat-value">${demWins}/${repWins}</div>
                    <div class="political-stat-label">Dem/Rep Wins</div>
                </div>
                <div class="political-stat-card">
                    <div class="political-stat-value">${totalVotes.toLocaleString()}</div>
                    <div class="political-stat-label">Total Votes</div>
                </div>
                <div class="political-stat-card">
                    <div class="political-stat-value">${regionsWithData}/${usRegions.length}</div>
                    <div class="political-stat-label">Regions w/ Data</div>
                </div>
            `;

            summaryContainer.style.display = 'block';
        }

        // Rest of the existing functions (updateOverlayControls, toggleComparisonMode, etc.)
        function updateOverlayControls() {
            const overlayControls = document.getElementById('overlayControls');
            const overlayOptions = document.getElementById('overlayOptions');
            
            // Check if we have mixed data types
            const uniqueDataTypes = [...new Set(selectedDataTypes)];
            
            if (uniqueDataTypes.length > 1 && selectedRegions.length > 0) {
                overlayControls.classList.add('visible');
                
                // Generate overlay options for each data type
                overlayOptions.innerHTML = '';
                
                uniqueDataTypes.forEach(dataType => {
                    const group = document.createElement('div');
                    group.className = 'overlay-group';
                    
                    const title = document.createElement('h4');
                    title.textContent = dataType.replace('-', ' ').toUpperCase();
                    group.appendChild(title);
                    
                    // Get available data fields for this data type
                    const dataFields = getDataFieldsForType(dataType);
                    
                    dataFields.forEach(field => {
                        const checkbox = document.createElement('div');
                        checkbox.className = 'overlay-checkbox';
                        
                        const input = document.createElement('input');
                        input.type = 'checkbox';
                        input.id = `overlay-${dataType}-${field.key}`;
                        input.checked = overlaySelections[`${dataType}-${field.key}`] || false;
                        input.onchange = () => {
                            overlaySelections[`${dataType}-${field.key}`] = input.checked;
                        };
                        
                        const label = document.createElement('label');
                        label.htmlFor = input.id;
                        label.textContent = field.label;
                        
                        checkbox.appendChild(input);
                        checkbox.appendChild(label);
                        group.appendChild(checkbox);
                    });
                    
                    overlayOptions.appendChild(group);
                });
            } else {
                overlayControls.classList.remove('visible');
            }
        }

        function getDataFieldsForType(dataType) {
            const fieldMappings = {
                'us-states': [
                    { key: 'cases', label: 'Cases' },
                    { key: 'deaths', label: 'Deaths' }
                ],
                'us-counties': [
                    { key: 'cases', label: 'Cases' },
                    { key: 'deaths', label: 'Deaths' }
                ],
                'colleges': [
                    { key: 'cases', label: 'Total Cases' },
                    { key: 'cases_2021', label: '2021 Cases' }
                ],
                'prisons-facilities': [
                    { key: 'inmate_cases', label: 'Inmate Cases' },
                    { key: 'officer_cases', label: 'Officer Cases' },
                    { key: 'inmate_deaths', label: 'Inmate Deaths' },
                    { key: 'officer_deaths', label: 'Officer Deaths' }
                ],
                'prisons-systems': [
                    { key: 'inmate_cases', label: 'Inmate Cases' },
                    { key: 'officer_cases', label: 'Officer Cases' },
                    { key: 'inmate_deaths', label: 'Inmate Deaths' },
                    { key: 'officer_deaths', label: 'Officer Deaths' }
                ],
                'excess-deaths': [
                    { key: 'excess_deaths', label: 'Excess Deaths' },
                    { key: 'expected_deaths', label: 'Expected Deaths' }
                ]
            };
            
            return fieldMappings[dataType] || [];
        }

        function toggleComparisonMode() {
            showComparison = !showComparison;
            const btn = document.getElementById('comparisonBtn');
            const table = document.getElementById('comparisonTable');
            
            if (showComparison) {
                btn.textContent = 'Hide Comparison Table';
                btn.classList.add('active');
                generateComparisonTable();
                table.style.display = 'block';
            } else {
                btn.textContent = 'Show Comparison Table';
                btn.classList.remove('active');
                table.style.display = 'none';
            }
        }

        function toggleChartMode() {
            cumulativeMode = !cumulativeMode;
            const btn = document.getElementById('chartModeBtn');
            
            if (cumulativeMode) {
                btn.textContent = 'Individual View';
                btn.classList.add('active');
            } else {
                btn.textContent = 'Cumulative View';
                btn.classList.remove('active');
            }
            
            updateCharts();
        }

        function updateOverlayCharts() {
            overlayMode = true;
            updateCharts();
        }

        function generateComparisonTable() {
            const table = document.getElementById('comparisonTable');
            
            let tableHTML = '<table><thead><tr><th>Region</th><th>Type</th><th>Cases/Data</th><th>Deaths/Info</th>';
            
            // Add political columns if political analysis is enabled
            if (showPoliticalAnalysis) {
                tableHTML += '<th>Political Winner</th><th>Dem %</th><th>Rep %</th>';
            }
            
            tableHTML += '<th>Additional Info</th></tr></thead><tbody>';
            
            selectedRegions.forEach((region, index) => {
                const dataType = selectedDataTypes[index];
                const regionData = getRegionData(region, dataType);
                
                if (regionData.length > 0) {
                    tableHTML += '<tr>';
                    tableHTML += `<td>${region}</td>`;
                    tableHTML += `<td>${dataType.replace('-', ' ')}</td>`;
                    
                    if (dataType === 'us-states' || dataType === 'us-counties') {
                        const latestData = regionData[regionData.length - 1];
                        const cases = latestData.cases || 0;
                        const deaths = latestData.deaths || 0;
                        const cfr = cases > 0 ? ((deaths / cases) * 100).toFixed(2) : 0;
                        
                        tableHTML += `<td>${cases.toLocaleString()}</td>`;
                        tableHTML += `<td>${deaths.toLocaleString()}</td>`;
                        
                        // Add political data if enabled
                        if (showPoliticalAnalysis) {
                            const politicalData = getRegionPoliticalData(region, dataType);
                            if (politicalData) {
                                const { winner, partyTotals, totalVotes } = aggregatePoliticalData(politicalData);
                                const demPct = totalVotes > 0 ? ((partyTotals['DEMOCRAT'] || 0) / totalVotes * 100).toFixed(1) : 0;
                                const repPct = totalVotes > 0 ? ((partyTotals['REPUBLICAN'] || 0) / totalVotes * 100).toFixed(1) : 0;
                                const winnerDisplay = winner === 'DEMOCRAT' ? 'Democrat' : winner === 'REPUBLICAN' ? 'Republican' : winner;
                                
                                tableHTML += `<td>${winnerDisplay}</td>`;
                                tableHTML += `<td>${demPct}%</td>`;
                                tableHTML += `<td>${repPct}%</td>`;
                            } else {
                                tableHTML += `<td>No data</td><td>-</td><td>-</td>`;
                            }
                        }
                        
                        tableHTML += `<td>CFR: ${cfr}% | Date: ${latestData.date || 'N/A'}</td>`;
                    } else {
                        // Handle other data types
                        if (dataType === 'colleges') {
                            const data = regionData[0];
                            tableHTML += `<td>${(data.cases || 0).toLocaleString()}</td>`;
                            tableHTML += `<td>${(data.cases_2021 || 0).toLocaleString()}</td>`;
                            if (showPoliticalAnalysis) tableHTML += `<td colspan="3">N/A</td>`;
                            tableHTML += `<td>State: ${data.state || 'N/A'}</td>`;
                        } else if (dataType.startsWith('prisons')) {
                            const data = regionData[0];
                            const totalCases = (data.total_inmate_cases || 0) + (data.total_officer_cases || 0);
                            const totalDeaths = (data.total_inmate_deaths || 0) + (data.total_officer_deaths || 0);
                            tableHTML += `<td>${totalCases.toLocaleString()}</td>`;
                            tableHTML += `<td>${totalDeaths.toLocaleString()}</td>`;
                            if (showPoliticalAnalysis) tableHTML += `<td colspan="3">N/A</td>`;
                            tableHTML += `<td>Pop: ${data.latest_inmate_population || data.max_inmate_population_2020 || 'N/A'}</td>`;
                        } else {
                            tableHTML += `<td>N/A</td><td>N/A</td>`;
                            if (showPoliticalAnalysis) tableHTML += `<td colspan="3">N/A</td>`;
                            tableHTML += `<td>N/A</td>`;
                        }
                    }
                    
                    tableHTML += '</tr>';
                }
            });
            
            tableHTML += '</tbody></table>';
            table.innerHTML = tableHTML;
        }

        function updateCharts() {
            if (selectedRegions.length === 0) {
                document.getElementById('chartsContainer').style.display = 'none';
                document.getElementById('statsGrid').style.display = 'none';
                return;
            }

            generateStatistics();
            generateCharts();
            document.getElementById('chartsContainer').style.display = 'grid';
            document.getElementById('statsGrid').style.display = 'grid';
        }

        function generateStatistics() {
            const statsGrid = document.getElementById('statsGrid');
            
            let totalCases = 0;
            let totalDeaths = 0;
            let additionalStats = {};

            selectedRegions.forEach((region, index) => {
                const dataType = selectedDataTypes[index];
                const regionData = getRegionData(region, dataType);
                
                if (regionData.length > 0) {
                    if (dataType === 'us-states' || dataType === 'us-counties') {
                        const latestData = regionData[regionData.length - 1];
                        totalCases += latestData.cases || 0;
                        totalDeaths += latestData.deaths || 0;
                    } else if (dataType === 'colleges') {
                        const data = regionData[0];
                        totalCases += data.cases || 0;
                        additionalStats.cases2021 = (additionalStats.cases2021 || 0) + (data.cases_2021 || 0);
                    } else if (dataType.startsWith('prisons')) {
                        const data = regionData[0];
                        totalCases += (data.total_inmate_cases || 0) + (data.total_officer_cases || 0);
                        totalDeaths += (data.total_inmate_deaths || 0) + (data.total_officer_deaths || 0);
                    } else if (dataType === 'excess-deaths') {
                        regionData.forEach(d => {
                            additionalStats.excessDeaths = (additionalStats.excessDeaths || 0) + (d.excess_deaths || 0);
                            additionalStats.expectedDeaths = (additionalStats.expectedDeaths || 0) + (d.expected_deaths || 0);
                        });
                    }
                }
            });

            let statsHTML = `
                <div class="stat-card">
                    <div class="stat-value">${totalCases.toLocaleString()}</div>
                    <div class="stat-label">Total Cases/Data Points</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value">${totalDeaths.toLocaleString()}</div>
                    <div class="stat-label">Total Deaths/Secondary Data</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value">${selectedRegions.length}</div>
                    <div class="stat-label">Regions Selected</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value">${new Set(selectedDataTypes).size}</div>
                    <div class="stat-label">Data Types</div>
                </div>
            `;

            statsGrid.innerHTML = statsHTML;
        }

        function generateCharts() {
            clearCharts();
            const chartsContainer = document.getElementById('chartsContainer');
            chartsContainer.innerHTML = '';

            // Check if we have mixed data types and overlay mode is enabled
            const uniqueDataTypes = [...new Set(selectedDataTypes)];
            
            if (uniqueDataTypes.length > 1 && overlayMode && Object.keys(overlaySelections).some(key => overlaySelections[key])) {
                createOverlayChart();
                overlayMode = false; // Reset overlay mode after creating chart
            } else {
                // Group regions by data type for better visualization
                const dataTypeGroups = {};
                selectedRegions.forEach((region, index) => {
                    const dataType = selectedDataTypes[index];
                    if (!dataTypeGroups[dataType]) {
                        dataTypeGroups[dataType] = [];
                    }
                    dataTypeGroups[dataType].push(region);
                });

                // Create charts for each data type group
                Object.keys(dataTypeGroups).forEach(dataType => {
                    if (dataType === 'us-states' || dataType === 'us-counties') {
                        createTimeSeriesChart(`${dataType}-cases`, `${dataType} - Cases Over Time`, 'cases', dataTypeGroups[dataType], dataType);
                        createTimeSeriesChart(`${dataType}-deaths`, `${dataType} - Deaths Over Time`, 'deaths', dataTypeGroups[dataType], dataType);
                        
                        // Add political chart if enabled
                        if (showPoliticalAnalysis) {
                            createPoliticalChart(`${dataType}-political`, `${dataType} - Political Breakdown`, dataTypeGroups[dataType], dataType);
                        }
                    } else {
                        createBarChart(`${dataType}-comparison`, `${dataType} - Comparison`, 'cases', dataTypeGroups[dataType], dataType);
                    }
                });

                // If we have mixed data types, create a normalized comparison
                if (uniqueDataTypes.length > 1) {
                    createMixedComparisonChart();
                }
            }
        }

        function createPoliticalChart(chartId, title, regions, dataType) {
            const chartsContainer = document.getElementById('chartsContainer');
            
            const chartPanel = document.createElement('div');
            chartPanel.className = 'chart-panel';
            chartPanel.innerHTML = `
                <h3>${title}</h3>
                <div class="chart-container">
                    <canvas id="${chartId}"></canvas>
                </div>
            `;
            chartsContainer.appendChild(chartPanel);

            const ctx = document.getElementById(chartId).getContext('2d');
            
            const demData = [];
            const repData = [];
            const labels = [];

            regions.forEach(region => {
                const politicalData = getRegionPoliticalData(region, dataType);
                if (politicalData) {
                    const { partyTotals, totalVotes } = aggregatePoliticalData(politicalData);
                    
                    const demPct = totalVotes > 0 ? ((partyTotals['DEMOCRAT'] || 0) / totalVotes) * 100 : 0;
                    const repPct = totalVotes > 0 ? ((partyTotals['REPUBLICAN'] || 0) / totalVotes) * 100 : 0;
                    
                    demData.push(demPct);
                    repData.push(repPct);
                    
                    // Shorten label for display
                    let label = region;
                    if (dataType === 'us-counties') {
                        label = region.split(', ')[0]; // Just county name
                    }
                    labels.push(label.length > 15 ? label.substring(0, 15) + '...' : label);
                }
            });

            if (labels.length === 0) {
                chartPanel.innerHTML = `<h3>${title}</h3><p style="color: #ff6b6b; text-align: center; padding: 2rem;">No political data available for selected regions</p>`;
                return;
            }

            const chartConfig = {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: [
                        {
                            label: 'Democrat',
                            data: demData,
                            backgroundColor: partyColors['DEMOCRAT'],
                            borderColor: partyColors['DEMOCRAT'],
                            borderWidth: 1
                        },
                        {
                            label: 'Republican',
                            data: repData,
                            backgroundColor: partyColors['REPUBLICAN'],
                            borderColor: partyColors['REPUBLICAN'],
                            borderWidth: 1
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            labels: { 
                                color: '#ffffff',
                                padding: 20
                            }
                        },
                        tooltip: {
                            backgroundColor: 'rgba(0, 0, 0, 0.8)',
                            titleColor: '#ffffff',
                            bodyColor: '#ffffff',
                            borderColor: '#1e3a8a',
                            borderWidth: 1,
                            callbacks: {
                                label: function(context) {
                                    return `${context.dataset.label}: ${context.parsed.y.toFixed(1)}%`;
                                }
                            }
                        }
                    },
                    scales: {
                        x: {
                            ticks: { color: '#ffffff' },
                            grid: { color: '#333333' }
                        },
                        y: {
                            ticks: { 
                                color: '#ffffff',
                                callback: function(value) {
                                    return value + '%';
                                }
                            },
                            grid: { color: '#333333' },
                            title: {
                                display: true,
                                text: 'Vote Percentage (2020 Election)',
                                color: '#ffffff'
                            },
                            max: 100
                        }
                    }
                }
            };

            try {
                charts[chartId] = new Chart(ctx, chartConfig);
                console.log(`Political chart ${chartId} created successfully`);
            } catch (error) {
                console.error('Error creating political chart:', error);
                chartPanel.innerHTML = `<h3>${title}</h3><p style="color: #ff6b6b; text-align: center; padding: 2rem;">Error creating chart: ${error.message}</p>`;
            }
        }

        // Keep all existing chart creation functions (createTimeSeriesChart, createBarChart, etc.)
        function createTimeSeriesChart(chartId, title, dataField, regions, dataType) {
            const chartsContainer = document.getElementById('chartsContainer');
            
            const chartPanel = document.createElement('div');
            chartPanel.className = 'chart-panel';
            chartPanel.innerHTML = `
                <h3>${title}</h3>
                <div class="chart-container">
                    <canvas id="${chartId}"></canvas>
                </div>
            `;
            chartsContainer.appendChild(chartPanel);

            const ctx = document.getElementById(chartId).getContext('2d');
            
            const datasets = regions.map((region, index) => {
                const regionData = getRegionData(region, dataType);
                const colors = ['#3b82f6', '#ef4444', '#10b981', '#f59e0b', '#8b5cf6', '#ec4899', '#14b8a6', '#f97316'];
                const color = colors[index % colors.length];

                const startDate = document.getElementById('startDate').value;
                const endDate = document.getElementById('endDate').value;
                
                let filteredData = regionData;
                if (startDate && endDate) {
                    filteredData = regionData.filter(d => {
                        const recordDate = new Date(d.date);
                        return recordDate >= new Date(startDate) && recordDate <= new Date(endDate);
                    });
                }
                
                let chartData;
                if (cumulativeMode) {
                    chartData = filteredData.map(d => ({ 
                        x: d.date, 
                        y: d[dataField] || 0 
                    }));
                } else {
                    chartData = [];
                    for (let i = 1; i < filteredData.length; i++) {
                        const current = filteredData[i][dataField] || 0;
                        const previous = filteredData[i-1][dataField] || 0;
                        const daily = Math.max(0, current - previous);
                        chartData.push({
                            x: filteredData[i].date,
                            y: daily
                        });
                    }
                }
                
                chartData = chartData.filter(d => d.x);

                return {
                    label: region.length > 40 ? region.substring(0, 40) + '...' : region,
                    data: chartData,
                    borderColor: color,
                    backgroundColor: color + '33',
                    tension: 0.1,
                    pointRadius: 2,
                    fill: false
                };
            });

            const chartConfig = {
                type: 'line',
                data: { datasets },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    interaction: {
                        intersect: false,
                        mode: 'index'
                    },
                    plugins: {
                        legend: {
                            labels: { 
                                color: '#ffffff',
                                usePointStyle: true,
                                padding: 20
                            }
                        },
                        tooltip: {
                            backgroundColor: 'rgba(0, 0, 0, 0.8)',
                            titleColor: '#ffffff',
                            bodyColor: '#ffffff',
                            borderColor: '#1e3a8a',
                            borderWidth: 1
                        }
                    },
                    scales: {
                        x: {
                            type: 'time',
                            time: {
                                unit: 'day',
                                displayFormats: {
                                    day: 'MMM dd, yyyy'
                                }
                            },
                            ticks: { 
                                color: '#ffffff',
                                maxTicksLimit: 10
                            },
                            grid: { color: '#333333' },
                            title: {
                                display: true,
                                text: 'Date',
                                color: '#ffffff'
                            }
                        },
                        y: {
                            ticks: { 
                                color: '#ffffff',
                                callback: function(value) {
                                    return value.toLocaleString();
                                }
                            },
                            grid: { color: '#333333' },
                            title: {
                                display: true,
                                text: cumulativeMode ? `Cumulative ${dataField}` : `Daily New ${dataField}`,
                                color: '#ffffff'
                            }
                        }
                    }
                }
            };

            try {
                charts[chartId] = new Chart(ctx, chartConfig);
                console.log(`Chart ${chartId} created successfully`);
            } catch (error) {
                console.error('Error creating chart:', error);
                chartPanel.innerHTML = `<h3>${title}</h3><p style="color: #ff6b6b; text-align: center; padding: 2rem;">Error creating chart: ${error.message}</p>`;
            }
        }

        function createBarChart(chartId, title, dataField, regions, dataType) {
            const chartsContainer = document.getElementById('chartsContainer');
            
            const chartPanel = document.createElement('div');
            chartPanel.className = 'chart-panel';
            chartPanel.innerHTML = `
                <h3>${title}</h3>
                <div class="chart-container">
                    <canvas id="${chartId}"></canvas>
                </div>
            `;
            chartsContainer.appendChild(chartPanel);

            const ctx = document.getElementById(chartId).getContext('2d');
            
            const datasets = regions.map((region, index) => {
                const regionData = getRegionData(region, dataType);
                const colors = ['#3b82f6', '#ef4444', '#10b981', '#f59e0b', '#8b5cf6', '#ec4899', '#14b8a6', '#f97316'];
                const color = colors[index % colors.length];

                let value = 0;
                if (regionData.length > 0) {
                    const data = regionData[0];
                    if (dataType === 'colleges') {
                        value = data.cases || 0;
                    } else if (dataType.startsWith('prisons')) {
                        value = (data.total_inmate_cases || 0) + (data.total_officer_cases || 0);
                    }
                }

                return {
                    label: region.length > 30 ? region.substring(0, 30) + '...' : region,
                    data: [value],
                    backgroundColor: color,
                    borderColor: color,
                    borderWidth: 1
                };
            });

            const chartConfig = {
                type: 'bar',
                data: {
                    labels: ['Cases'],
                    datasets: datasets
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            labels: { 
                                color: '#ffffff',
                                padding: 20
                            }
                        },
                        tooltip: {
                            backgroundColor: 'rgba(0, 0, 0, 0.8)',
                            titleColor: '#ffffff',
                            bodyColor: '#ffffff',
                            borderColor: '#1e3a8a',
                            borderWidth: 1
                        }
                    },
                    scales: {
                        x: {
                            ticks: { color: '#ffffff' },
                            grid: { color: '#333333' }
                        },
                        y: {
                            ticks: { 
                                color: '#ffffff',
                                callback: function(value) {
                                    return value.toLocaleString();
                                }
                            },
                            grid: { color: '#333333' },
                            title: {
                                display: true,
                                text: 'Total Cases',
                                color: '#ffffff'
                            }
                        }
                    }
                }
            };

            try {
                charts[chartId] = new Chart(ctx, chartConfig);
                console.log(`Chart ${chartId} created successfully`);
            } catch (error) {
                console.error('Error creating chart:', error);
                chartPanel.innerHTML = `<h3>${title}</h3><p style="color: #ff6b6b; text-align: center; padding: 2rem;">Error creating chart: ${error.message}</p>`;
            }
        }

        function createMixedComparisonChart() {
            const chartsContainer = document.getElementById('chartsContainer');
            
            const chartPanel = document.createElement('div');
            chartPanel.className = 'chart-panel';
            chartPanel.innerHTML = `
                <h3>Mixed Data Types - Normalized Comparison</h3>
                <div class="chart-container">
                    <canvas id="mixed-comparison"></canvas>
                </div>
            `;
            chartsContainer.appendChild(chartPanel);

            const ctx = document.getElementById('mixed-comparison').getContext('2d');
            
            const datasets = selectedRegions.map((region, index) => {
                const dataType = selectedDataTypes[index];
                const regionData = getRegionData(region, dataType);
                const colors = ['#3b82f6', '#ef4444', '#10b981', '#f59e0b', '#8b5cf6', '#ec4899', '#14b8a6', '#f97316'];
                const color = colors[index % colors.length];

                let value = 0;
                if (regionData.length > 0) {
                    if (dataType === 'us-states' || dataType === 'us-counties') {
                        const latestData = regionData[regionData.length - 1];
                        value = latestData.cases || 0;
                    } else if (dataType === 'colleges') {
                        value = regionData[0].cases || 0;
                    } else if (dataType.startsWith('prisons')) {
                        const data = regionData[0];
                        value = (data.total_inmate_cases || 0) + (data.total_officer_cases || 0);
                    }
                }

                return {
                    label: `${region} [${dataType.replace('-', ' ')}]`,
                    data: [value],
                    backgroundColor: color,
                    borderColor: color,
                    borderWidth: 1
                };
            });

            const chartConfig = {
                type: 'bar',
                data: {
                    labels: ['Total Cases'],
                    datasets: datasets
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            labels: { 
                                color: '#ffffff',
                                padding: 20
                            }
                        },
                        tooltip: {
                            backgroundColor: 'rgba(0, 0, 0, 0.8)',
                            titleColor: '#ffffff',
                            bodyColor: '#ffffff',
                            borderColor: '#1e3a8a',
                            borderWidth: 1
                        }
                    },
                    scales: {
                        x: {
                            ticks: { color: '#ffffff' },
                            grid: { color: '#333333' }
                        },
                        y: {
                            type: 'logarithmic',
                            ticks: { 
                                color: '#ffffff',
                                callback: function(value) {
                                    return value.toLocaleString();
                                }
                            },
                            grid: { color: '#333333' },
                            title: {
                                display: true,
                                text: 'Total Cases (Log Scale)',
                                color: '#ffffff'
                            }
                        }
                    }
                }
            };

            try {
                charts['mixed-comparison'] = new Chart(ctx, chartConfig);
                console.log('Mixed comparison chart created successfully');
            } catch (error) {
                console.error('Error creating mixed comparison chart:', error);
                chartPanel.innerHTML = `<h3>Mixed Data Types - Normalized Comparison</h3><p style="color: #ff6b6b; text-align: center; padding: 2rem;">Error creating chart: ${error.message}</p>`;
            }
        }

        function createOverlayChart() {
            const chartsContainer = document.getElementById('chartsContainer');
            
            const chartPanel = document.createElement('div');
            chartPanel.className = 'chart-panel';
            chartPanel.innerHTML = `
                <h3>Custom Overlay Comparison</h3>
                <div class="chart-container">
                    <canvas id="overlay-chart"></canvas>
                </div>
            `;
            chartsContainer.appendChild(chartPanel);

            const ctx = document.getElementById('overlay-chart').getContext('2d');
            
            const datasets = [];
            const colors = ['#3b82f6', '#ef4444', '#10b981', '#f59e0b', '#8b5cf6', '#ec4899', '#14b8a6', '#f97316'];
            let colorIndex = 0;

            selectedRegions.forEach((region, regionIndex) => {
                const dataType = selectedDataTypes[regionIndex];
                const regionData = getRegionData(region, dataType);
                
                // Check which data fields are selected for this data type
                const dataFields = getDataFieldsForType(dataType);
                
                dataFields.forEach(field => {
                    const selectionKey = `${dataType}-${field.key}`;
                    if (overlaySelections[selectionKey]) {
                        const color = colors[colorIndex % colors.length];
                        colorIndex++;
                        
                        let value = 0;
                        if (regionData.length > 0) {
                            const data = regionData[0];
                            if (field.key === 'cases') {
                                value = data.cases || 0;
                            } else if (field.key === 'deaths') {
                                value = data.deaths || 0;
                            } else if (field.key === 'cases_2021') {
                                value = data.cases_2021 || 0;
                            } else if (field.key === 'inmate_cases') {
                                value = data.total_inmate_cases || 0;
                            } else if (field.key === 'officer_cases') {
                                value = data.total_officer_cases || 0;
                            } else if (field.key === 'inmate_deaths') {
                                value = data.total_inmate_deaths || 0;
                            } else if (field.key === 'officer_deaths') {
                                value = data.total_officer_deaths || 0;
                            } else if (field.key === 'excess_deaths') {
                                value = regionData.reduce((sum, d) => sum + (d.excess_deaths || 0), 0);
                            } else if (field.key === 'expected_deaths') {
                                value = regionData.reduce((sum, d) => sum + (d.expected_deaths || 0), 0);
                            }
                        }

                        datasets.push({
                            label: `${region} - ${field.label}`,
                            data: [value],
                            backgroundColor: color,
                            borderColor: color,
                            borderWidth: 1
                        });
                    }
                });
            });

            const chartConfig = {
                type: 'bar',
                data: {
                    labels: ['Selected Data Points'],
                    datasets: datasets
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            labels: { 
                                color: '#ffffff',
                                padding: 20
                            }
                        },
                        tooltip: {
                            backgroundColor: 'rgba(0, 0, 0, 0.8)',
                            titleColor: '#ffffff',
                            bodyColor: '#ffffff',
                            borderColor: '#1e3a8a',
                            borderWidth: 1
                        }
                    },
                    scales: {
                        x: {
                            ticks: { color: '#ffffff' },
                            grid: { color: '#333333' }
                        },
                        y: {
                            type: 'logarithmic',
                            ticks: { 
                                color: '#ffffff',
                                callback: function(value) {
                                    return value.toLocaleString();
                                }
                            },
                            grid: { color: '#333333' },
                            title: {
                                display: true,
                                text: 'Values (Log Scale)',
                                color: '#ffffff'
                            }
                        }
                    }
                }
            };

            try {
                charts['overlay-chart'] = new Chart(ctx, chartConfig);
                console.log('Overlay chart created successfully');
            } catch (error) {
                console.error('Error creating overlay chart:', error);
                chartPanel.innerHTML = `<h3>Custom Overlay Comparison</h3><p style="color: #ff6b6b; text-align: center; padding: 2rem;">Error creating chart: ${error.message}</p>`;
            }
        }

        function getRegionData(region, dataType) {
            const currentData = allDataSets[dataType];
            if (!currentData) return [];
            
            if (dataType === 'us-states') {
                return currentData.filter(d => d.state === region).sort((a, b) => new Date(a.date) - new Date(b.date));
            } else if (dataType === 'us-counties') {
                const [county, state] = region.split(', ');
                return currentData.filter(d => d.county === county && d.state === state).sort((a, b) => new Date(a.date) - new Date(b.date));
            } else if (dataType === 'colleges') {
                const collegeName = region.split(' (')[0];
                return currentData.filter(d => d.college === collegeName);
            } else if (dataType === 'prisons-facilities') {
                const facilityName = region.split(' (')[0];
                return currentData.filter(d => d.facility_name === facilityName);
            } else if (dataType === 'prisons-systems') {
                return currentData.filter(d => (d.state || d.system) === region);
            } else if (dataType === 'excess-deaths') {
                if (region.includes(', ')) {
                    const [place, country] = region.split(', ');
                    return currentData.filter(d => d.placename === place && d.country === country);
                } else {
                    return currentData.filter(d => d.country === region && !d.placename);
                }
            }
            
            return [];
        }

        function clearCharts() {
            Object.values(charts).forEach(chart => {
                try {
                    chart.destroy();
                } catch (e) {
                    console.warn('Error destroying chart:', e);
                }
            });
            charts = {};
        }

        function showError(message) {
            const container = document.querySelector('.container');
            const existingError = document.querySelector('.error');
            if (existingError) {
                existingError.remove();
            }
            
            const errorDiv = document.createElement('div');
            errorDiv.className = 'error';
            errorDiv.textContent = message;
            container.insertBefore(errorDiv, container.firstChild);
            
            setTimeout(() => {
                if (errorDiv.parentNode) {
                    errorDiv.remove();
                }
            }, 10000);
        }

        function showLoading(show) {
            document.getElementById('loadingIndicator').style.display = show ? 'block' : 'none';
        }

        // Initialize the application
        document.addEventListener('DOMContentLoaded', function() {
            console.log('COVID-19 Data Dashboard with Political Integration initialized');
            console.log('Libraries loaded:', {
                Chart: typeof Chart !== 'undefined',
                Papa: typeof Papa !== 'undefined'
            });
            
            // Set default date range
            const startDate = document.getElementById('startDate');
            const endDate = document.getElementById('endDate');
            startDate.value = '2020-03-01';
            endDate.value = '2023-03-23';
        });

        // Window resize handler for responsive charts
        window.addEventListener('resize', function() {
            Object.values(charts).forEach(chart => {
                try {
                    chart.resize();
                } catch (e) {
                    console.warn('Error resizing chart:', e);
                }
            });
        });
    </script>
</body>
</html>