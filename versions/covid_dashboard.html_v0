<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>COVID-19 Data Dashboard</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/papaparse/5.4.1/papaparse.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #000000;
            color: #ffffff;
            line-height: 1.6;
        }

        .header {
            background-color: #1a1a1a;
            padding: 1rem;
            border-bottom: 2px solid #1e3a8a;
            position: sticky;
            top: 0;
            z-index: 1000;
        }

        .header h1 {
            text-align: center;
            margin-bottom: 1rem;
            color: #ffffff;
        }

        .nav-menu {
            position: relative;
            display: inline-block;
            width: 100%;
        }

        .nav-dropdown {
            background-color: #1e3a8a;
            color: white;
            padding: 12px 20px;
            font-size: 16px;
            border: none;
            cursor: pointer;
            width: 100%;
            border-radius: 4px;
        }

        .nav-dropdown:hover {
            background-color: #1d4ed8;
        }

        .nav-content {
            display: none;
            position: absolute;
            background-color: #1a1a1a;
            min-width: 100%;
            box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.5);
            z-index: 1;
            border-radius: 4px;
            border: 1px solid #1e3a8a;
        }

        .nav-content a {
            color: white;
            padding: 12px 16px;
            text-decoration: none;
            display: block;
            transition: background-color 0.3s;
        }

        .nav-content a:hover {
            background-color: #1e3a8a;
        }

        .nav-menu:hover .nav-content {
            display: block;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem 1rem;
        }

        .page {
            display: none;
        }

        .page.active {
            display: block;
        }

        .controls {
            background-color: #1a1a1a;
            padding: 2rem;
            margin-bottom: 2rem;
            border-radius: 8px;
            border: 1px solid #1e3a8a;
        }

        .control-group {
            margin-bottom: 1.5rem;
        }

        .control-group label {
            display: block;
            margin-bottom: 0.5rem;
            color: #ffffff;
            font-weight: 500;
        }

        .control-group select, .control-group input {
            width: 100%;
            padding: 0.75rem;
            background-color: #333333;
            color: #ffffff;
            border: 1px solid #1e3a8a;
            border-radius: 4px;
            font-size: 16px;
        }

        .control-group select:focus, .control-group input:focus {
            outline: none;
            border-color: #3b82f6;
            box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.3);
        }

        .button {
            background-color: #1e3a8a;
            color: white;
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
            margin: 0.5rem 0.5rem 0.5rem 0;
            transition: background-color 0.3s;
        }

        .button:hover {
            background-color: #1d4ed8;
        }

        .button:disabled {
            background-color: #666666;
            cursor: not-allowed;
        }

        .selected-regions {
            background-color: #1a1a1a;
            padding: 1rem;
            margin-bottom: 2rem;
            border-radius: 8px;
            border: 1px solid #1e3a8a;
        }

        .region-tag {
            display: inline-block;
            background-color: #1e3a8a;
            color: white;
            padding: 0.5rem 1rem;
            margin: 0.25rem;
            border-radius: 20px;
            font-size: 14px;
        }

        .remove-region {
            margin-left: 0.5rem;
            cursor: pointer;
            font-weight: bold;
        }

        .charts-container {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(500px, 1fr));
            gap: 2rem;
            margin-bottom: 2rem;
        }

        .chart-panel {
            background-color: #1a1a1a;
            padding: 2rem;
            border-radius: 8px;
            border: 1px solid #1e3a8a;
        }

        .chart-panel h3 {
            margin-bottom: 1rem;
            color: #ffffff;
            text-align: center;
        }

        .chart-container {
            position: relative;
            height: 300px;
            width: 100%;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin-bottom: 2rem;
        }

        .stat-card {
            background-color: #1a1a1a;
            padding: 1.5rem;
            border-radius: 8px;
            border: 1px solid #1e3a8a;
            text-align: center;
        }

        .stat-value {
            font-size: 2rem;
            font-weight: bold;
            color: #3b82f6;
            margin-bottom: 0.5rem;
        }

        .stat-label {
            color: #cccccc;
            font-size: 0.9rem;
        }

        .loading {
            text-align: center;
            padding: 2rem;
            color: #cccccc;
        }

        .error {
            background-color: #dc2626;
            color: white;
            padding: 1rem;
            border-radius: 4px;
            margin: 1rem 0;
        }

        .info-section {
            background-color: #1a1a1a;
            padding: 2rem;
            margin-bottom: 2rem;
            border-radius: 8px;
            border: 1px solid #1e3a8a;
        }

        .info-section h2 {
            color: #3b82f6;
            margin-bottom: 1rem;
        }

        .info-section h3 {
            color: #ffffff;
            margin: 1.5rem 0 1rem 0;
        }

        .info-section p, .info-section li {
            margin-bottom: 0.5rem;
            color: #cccccc;
        }

        .info-section ul {
            margin-left: 2rem;
        }

        @media (max-width: 768px) {
            .container {
                padding: 1rem 0.5rem;
            }

            .charts-container {
                grid-template-columns: 1fr;
            }

            .chart-panel {
                padding: 1rem;
            }

            .controls {
                padding: 1rem;
            }

            .stats-grid {
                grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            }
        }

        @media (max-width: 600px) {
            .charts-container {
                grid-template-columns: 1fr;
            }

            .chart-container {
                height: 250px;
            }
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>COVID-19 Data Analysis Dashboard</h1>
        <div class="nav-menu">
            <button class="nav-dropdown">Navigation Menu</button>
            <div class="nav-content">
                <a href="#" onclick="showPage('dashboard')">Data Dashboard</a>
                <a href="#" onclick="showPage('acknowledgments')">Acknowledgments</a>
                <a href="#" onclick="showPage('methodology')">Data Methodology</a>
            </div>
        </div>
    </div>

    <div class="container">
        <!-- Main Dashboard Page -->
        <div id="dashboard" class="page active">
            <div class="controls">
                <div class="control-group">
                    <label for="dataType">Data Type:</label>
                    <select id="dataType" onchange="loadData()">
                        <option value="">Select Data Type</option>
                        <option value="us-states">US States</option>
                        <option value="us-counties">US Counties (Recent)</option>
                        <option value="colleges">Colleges & Universities</option>
                        <option value="prisons-facilities">Prison Facilities</option>
                        <option value="prisons-systems">Prison Systems</option>
                        <option value="excess-deaths">Excess Deaths (Global)</option>
                        <option value="mask-use">Mask Use Survey</option>
                    </select>
                </div>

                <div class="control-group">
                    <label for="regionSelect">Select Region:</label>
                    <select id="regionSelect" disabled>
                        <option value="">Choose data type first</option>
                    </select>
                    <button class="button" onclick="addRegion()" id="addRegionBtn" disabled>Add Region</button>
                </div>

                <div class="control-group">
                    <label for="dateRange">Date Range:</label>
                    <input type="date" id="startDate" disabled>
                    <input type="date" id="endDate" disabled>
                    <button class="button" onclick="updateCharts()" id="updateBtn" disabled>Update Charts</button>
                </div>
            </div>

            <div class="selected-regions">
                <h3>Selected Regions for Comparison:</h3>
                <div id="regionTags">
                    <p>No regions selected</p>
                </div>
                <button class="button" onclick="clearRegions()">Clear All</button>
            </div>

            <div class="stats-grid" id="statsGrid" style="display: none;">
                <!-- Stats cards will be dynamically generated -->
            </div>

            <div class="charts-container" id="chartsContainer" style="display: none;">
                <!-- Charts will be dynamically generated -->
            </div>

            <div class="loading" id="loadingIndicator" style="display: none;">
                Loading data...
            </div>
        </div>

        <!-- Acknowledgments Page -->
        <div id="acknowledgments" class="page">
            <div class="info-section">
                <h2>Acknowledgments</h2>
                <p>This dashboard is built using COVID-19 data collected by The New York Times. We extend our gratitude to all contributors and data sources.</p>
                
                <h3>Data Sources</h3>
                <ul>
                    <li><strong>Primary Data:</strong> The New York Times COVID-19 Data Repository</li>
                    <li><strong>US Cases and Deaths:</strong> State and local government health departments</li>
                    <li><strong>College Data:</strong> Survey of American colleges and universities</li>
                    <li><strong>Prison Data:</strong> State and federal prison systems, ICE, local jails</li>
                    <li><strong>Excess Deaths:</strong> National and municipal health departments, vital statistics offices</li>
                    <li><strong>Mask Usage:</strong> Dynata survey data</li>
                </ul>

                <h3>Contributors</h3>
                <p>Data collection and analysis by dozens of journalists at The New York Times, including:</p>
                <ul>
                    <li>Sarah Almukhtar, Aliza Aufrichtig, Anne Barnard, Matthew Bloch</li>
                    <li>Weiyi Cai, Julia Calderone, Keith Collins, Matthew Conlen</li>
                    <li>Lindsey Cook, Gabriel Gianordoli, Amy Harmon, Rich Harris</li>
                    <li>Adeel Hassan, Jon Huang, Danya Issawi, Danielle Ivory</li>
                    <li>K.K. Rebecca Lai, Alex Lemonides, Allison McCann</li>
                    <li>And many other dedicated journalists and researchers</li>
                </ul>

                <h3>Technical Acknowledgments</h3>
                <ul>
                    <li><strong>Visualization:</strong> Chart.js for interactive charts</li>
                    <li><strong>Data Processing:</strong> Papa Parse for CSV handling</li>
                    <li><strong>Design:</strong> Responsive design principles for mobile compatibility</li>
                </ul>

                <h3>License</h3>
                <p>This data is licensed under Creative Commons Attribution-NonCommercial 4.0 International license. The data is made publicly available for broad, noncommercial public use including by medical and public health researchers, policymakers, analysts and local news media.</p>
            </div>
        </div>

        <!-- Methodology Page -->
        <div id="methodology" class="page">
            <div class="info-section">
                <h2>Data Collection Methodology and Caveats</h2>
                
                <h3>General Methodology</h3>
                <p>The data presented in this dashboard is the product of extensive journalistic effort by The New York Times, monitoring news conferences, analyzing data releases, and seeking clarification from public officials across multiple time zones.</p>

                <h3>Data Collection Challenges</h3>
                <ul>
                    <li><strong>Fragmented Reporting:</strong> The American public health system's fragmented nature has led to inconsistent reporting across jurisdictions</li>
                    <li><strong>Corrections and Updates:</strong> Officials have sometimes corrected information hours or days after first reporting</li>
                    <li><strong>Disappearing Cases:</strong> Cases have occasionally disappeared from databases or been moved between jurisdictions</li>
                    <li><strong>Varying Standards:</strong> Different jurisdictions use different criteria for case classification</li>
                </ul>

                <h3>Confirmed vs. Probable Cases</h3>
                <p><strong>Confirmed Cases:</strong> Individuals whose coronavirus infections were confirmed by a laboratory test (molecular or RT-PCR tests)</p>
                <p><strong>Probable Cases:</strong> Individuals evaluated by public health officials using federal and state criteria, including antigen/antibody tests combined with clinical evidence</p>

                <h3>Geographic Considerations</h3>
                <ul>
                    <li><strong>Treatment Location:</strong> When available, patients are counted where they are being treated, not necessarily where they live</li>
                    <li><strong>New York City:</strong> All five boroughs are combined into a single area</li>
                    <li><strong>Geographic Exceptions:</strong> Some regions have special reporting arrangements documented in the methodology</li>
                </ul>

                <h3>College Data Specifics</h3>
                <ul>
                    <li>Survey of 1,900+ colleges conducted July 2020 - May 2021</li>
                    <li>Includes all four-year public institutions and private colleges competing in NCAA sports</li>
                    <li>Cases include students, faculty, staff, and medical personnel</li>
                    <li>Reporting methods vary significantly between institutions</li>
                </ul>

                <h3>Prison Data Specifics</h3>
                <ul>
                    <li>No uniform national reporting system existed</li>
                    <li>Data collected through websites, direct inquiries, and public records requests</li>
                    <li>Includes 2,805 facilities across state/federal prisons, ICE centers, jails</li>
                    <li>Likely represents undercounts due to limited testing</li>
                </ul>

                <h3>Important Limitations</h3>
                <ul>
                    <li><strong>Testing Limitations:</strong> Widespread shortage of testing affects case counts</li>
                    <li><strong>Delayed Reporting:</strong> Some jurisdictions experience significant delays</li>
                    <li><strong>Methodology Changes:</strong> Reporting criteria have evolved over time</li>
                    <li><strong>Undercount Likelihood:</strong> True case numbers are likely higher than reported</li>
                </ul>

                <h3>Data Updates</h3>
                <p><strong>Note:</strong> As of March 24, 2023, The New York Times stopped updating daily cases and deaths data. This repository serves as an archive of virus data reporting from 2020-2023.</p>
            </div>
        </div>
    </div>

    <script>
        // Global variables
        let currentData = [];
        let selectedRegions = [];
        let charts = {};

        // Sample data structure for demonstration
        const sampleData = {
            'us-states': [
                { date: '2020-03-15', state: 'California', fips: '06', cases: 450, deaths: 6 },
                { date: '2020-03-15', state: 'New York', fips: '36', cases: 732, deaths: 3 },
                { date: '2020-03-15', state: 'Washington', fips: '53', cases: 904, deaths: 48 },
                { date: '2020-04-15', state: 'California', fips: '06', cases: 25600, deaths: 850 },
                { date: '2020-04-15', state: 'New York', fips: '36', cases: 214454, deaths: 11586 },
                { date: '2020-04-15', state: 'Washington', fips: '53', cases: 9052, deaths: 432 }
            ],
            'us-counties': [
                { date: '2020-03-15', county: 'Los Angeles', state: 'California', fips: '06037', cases: 144, deaths: 1 },
                { date: '2020-03-15', county: 'New York City', state: 'New York', fips: '36998', cases: 329, deaths: 2 },
                { date: '2020-04-15', county: 'Los Angeles', state: 'California', fips: '06037', cases: 8430, deaths: 169 },
                { date: '2020-04-15', county: 'New York City', state: 'New York', fips: '36998', cases: 105279, deaths: 6898 }
            ]
        };

        // Navigation functions
        function showPage(pageId) {
            document.querySelectorAll('.page').forEach(page => {
                page.classList.remove('active');
            });
            document.getElementById(pageId).classList.add('active');
        }

        // Data loading functions
        async function loadData() {
            const dataType = document.getElementById('dataType').value;
            if (!dataType) return;

            showLoading(true);
            
            try {
                let csvFile = '';
                switch(dataType) {
                    case 'us-states':
                        csvFile = 'nytimes_covid-19-data/us-states.csv';
                        break;
                    case 'us-counties':
                        csvFile = 'nytimes_covid-19-data/us-counties-recent.csv'; // Use recent for faster loading
                        break;
                    case 'colleges':
                        csvFile = 'nytimes_covid-19-data/colleges/colleges.csv';
                        break;
                    case 'prisons-facilities':
                        csvFile = 'nytimes_covid-19-data/prisons/facilities.csv';
                        break;
                    case 'prisons-systems':
                        csvFile = 'nytimes_covid-19-data/prisons/systems.csv';
                        break;
                    case 'excess-deaths':
                        csvFile = 'nytimes_covid-19-data/excess-deaths/deaths.csv';
                        break;
                    case 'mask-use':
                        csvFile = 'nytimes_covid-19-data/mask-use/mask-use-by-county.csv';
                        break;
                    default:
                        throw new Error('Unknown data type');
                }

                const response = await fetch(csvFile);
                if (!response.ok) {
                    throw new Error(`Failed to load ${csvFile}: ${response.statusText}`);
                }
                
                const csvText = await response.text();
                const parsedData = Papa.parse(csvText, {
                    header: true,
                    dynamicTyping: true,
                    skipEmptyLines: true
                });

                if (parsedData.errors.length > 0) {
                    console.warn('CSV parsing errors:', parsedData.errors);
                }

                currentData = parsedData.data;
                populateRegionSelect(dataType);
                enableControls();
                showLoading(false);
                
            } catch (error) {
                console.error('Error loading data:', error);
                showError(`Failed to load data: ${error.message}`);
                showLoading(false);
            }
        }

        function populateRegionSelect(dataType) {
            const regionSelect = document.getElementById('regionSelect');
            regionSelect.innerHTML = '<option value="">Select a region</option>';

            try {
                if (dataType === 'us-states') {
                    const states = [...new Set(currentData.map(d => d.state))].filter(Boolean).sort();
                    states.forEach(state => {
                        const option = document.createElement('option');
                        option.value = state;
                        option.textContent = state;
                        regionSelect.appendChild(option);
                    });
                } else if (dataType === 'us-counties') {
                    const counties = [...new Set(currentData.map(d => `${d.county}, ${d.state}`))].filter(county => county && !county.includes('undefined')).sort();
                    counties.forEach(county => {
                        const option = document.createElement('option');
                        option.value = county;
                        option.textContent = county;
                        regionSelect.appendChild(option);
                    });
                } else if (dataType === 'colleges') {
                    const colleges = [...new Set(currentData.map(d => `${d.college} (${d.state})`))].filter(Boolean).sort();
                    colleges.forEach(college => {
                        const option = document.createElement('option');
                        option.value = college;
                        option.textContent = college;
                        regionSelect.appendChild(option);
                    });
                } else if (dataType === 'prisons-facilities') {
                    const facilities = [...new Set(currentData.map(d => `${d.facility_name} (${d.facility_state})`))].filter(Boolean).sort();
                    facilities.forEach(facility => {
                        const option = document.createElement('option');
                        option.value = facility;
                        option.textContent = facility;
                        regionSelect.appendChild(option);
                    });
                } else if (dataType === 'prisons-systems') {
                    const systems = [...new Set(currentData.map(d => d.state || d.system))].filter(Boolean).sort();
                    systems.forEach(system => {
                        const option = document.createElement('option');
                        option.value = system;
                        option.textContent = system;
                        regionSelect.appendChild(option);
                    });
                } else if (dataType === 'excess-deaths') {
                    const countries = [...new Set(currentData.map(d => d.placename ? `${d.placename}, ${d.country}` : d.country))].filter(Boolean).sort();
                    countries.forEach(country => {
                        const option = document.createElement('option');
                        option.value = country;
                        option.textContent = country;
                        regionSelect.appendChild(option);
                    });
                } else if (dataType === 'mask-use') {
                    // For mask use, we'll need to group by state since we have county FIPS codes
                    const message = document.createElement('option');
                    message.value = '';
                    message.textContent = 'Mask use data shows county-level percentages';
                    regionSelect.appendChild(message);
                }

                regionSelect.disabled = false;
                document.getElementById('addRegionBtn').disabled = false;
                
            } catch (error) {
                console.error('Error populating region select:', error);
                showError('Error loading region data');
            }
        }

        function enableControls() {
            document.getElementById('startDate').disabled = false;
            document.getElementById('endDate').disabled = false;
            document.getElementById('updateBtn').disabled = false;

            // Set default date range
            const dates = currentData.map(d => new Date(d.date));
            if (dates.length > 0) {
                const minDate = new Date(Math.min(...dates));
                const maxDate = new Date(Math.max(...dates));
                document.getElementById('startDate').value = minDate.toISOString().split('T')[0];
                document.getElementById('endDate').value = maxDate.toISOString().split('T')[0];
            }
        }

        function addRegion() {
            const regionSelect = document.getElementById('regionSelect');
            const selectedRegion = regionSelect.value;

            if (selectedRegion && !selectedRegions.includes(selectedRegion)) {
                selectedRegions.push(selectedRegion);
                updateRegionTags();
                updateCharts();
            }
        }

        function removeRegion(region) {
            selectedRegions = selectedRegions.filter(r => r !== region);
            updateRegionTags();
            updateCharts();
        }

        function clearRegions() {
            selectedRegions = [];
            updateRegionTags();
            clearCharts();
        }

        function updateRegionTags() {
            const tagsContainer = document.getElementById('regionTags');
            
            if (selectedRegions.length === 0) {
                tagsContainer.innerHTML = '<p>No regions selected</p>';
                return;
            }

            tagsContainer.innerHTML = selectedRegions.map(region => 
                `<span class="region-tag">
                    ${region}
                    <span class="remove-region" onclick="removeRegion('${region}')">×</span>
                </span>`
            ).join('');
        }

        function updateCharts() {
            if (selectedRegions.length === 0) {
                document.getElementById('chartsContainer').style.display = 'none';
                document.getElementById('statsGrid').style.display = 'none';
                return;
            }

            generateStatistics();
            generateCharts();
            document.getElementById('chartsContainer').style.display = 'grid';
            document.getElementById('statsGrid').style.display = 'grid';
        }

        function generateStatistics() {
            const statsGrid = document.getElementById('statsGrid');
            const dataType = document.getElementById('dataType').value;
            
            let totalCases = 0;
            let totalDeaths = 0;
            let additionalStats = {};

            selectedRegions.forEach(region => {
                const regionData = getRegionData(region);
                if (regionData.length > 0) {
                    const latestData = regionData[regionData.length - 1];
                    
                    if (dataType === 'us-states' || dataType === 'us-counties') {
                        totalCases += latestData.cases || 0;
                        totalDeaths += latestData.deaths || 0;
                    } else if (dataType === 'colleges') {
                        totalCases += latestData.cases || 0;
                        additionalStats.cases2021 = (additionalStats.cases2021 || 0) + (latestData.cases_2021 || 0);
                    } else if (dataType.startsWith('prisons')) {
                        if (dataType === 'prisons-facilities') {
                            totalCases += (latestData.total_inmate_cases || 0) + (latestData.total_officer_cases || 0);
                            totalDeaths += (latestData.total_inmate_deaths || 0) + (latestData.total_officer_deaths || 0);
                        } else {
                            totalCases += (latestData.total_inmate_cases || 0) + (latestData.total_officer_cases || 0);
                            totalDeaths += (latestData.total_inmate_deaths || 0) + (latestData.total_officer_deaths || 0);
                        }
                    } else if (dataType === 'excess-deaths') {
                        additionalStats.excessDeaths = (additionalStats.excessDeaths || 0) + (latestData.excess_deaths || 0);
                        additionalStats.expectedDeaths = (additionalStats.expectedDeaths || 0) + (latestData.expected_deaths || 0);
                    }
                }
            });

            let statsHTML = '';
            
            if (dataType === 'us-states' || dataType === 'us-counties') {
                statsHTML = `
                    <div class="stat-card">
                        <div class="stat-value">${totalCases.toLocaleString()}</div>
                        <div class="stat-label">Total Cases</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value">${totalDeaths.toLocaleString()}</div>
                        <div class="stat-label">Total Deaths</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value">${selectedRegions.length}</div>
                        <div class="stat-label">Regions Selected</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value">${totalCases > 0 ? ((totalDeaths / totalCases) * 100).toFixed(2) : 0}%</div>
                        <div class="stat-label">Case Fatality Rate</div>
                    </div>
                `;
            } else if (dataType === 'colleges') {
                statsHTML = `
                    <div class="stat-card">
                        <div class="stat-value">${totalCases.toLocaleString()}</div>
                        <div class="stat-label">Total Cases (Pandemic)</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value">${(additionalStats.cases2021 || 0).toLocaleString()}</div>
                        <div class="stat-label">Cases in 2021</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value">${selectedRegions.length}</div>
                        <div class="stat-label">Colleges Selected</div>
                    </div>
                `;
            } else if (dataType.startsWith('prisons')) {
                statsHTML = `
                    <div class="stat-card">
                        <div class="stat-value">${totalCases.toLocaleString()}</div>
                        <div class="stat-label">Total Cases</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value">${totalDeaths.toLocaleString()}</div>
                        <div class="stat-label">Total Deaths</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value">${selectedRegions.length}</div>
                        <div class="stat-label">Facilities/Systems</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value">${totalCases > 0 ? ((totalDeaths / totalCases) * 100).toFixed(2) : 0}%</div>
                        <div class="stat-label">Case Fatality Rate</div>
                    </div>
                `;
            } else if (dataType === 'excess-deaths') {
                statsHTML = `
                    <div class="stat-card">
                        <div class="stat-value">${(additionalStats.excessDeaths || 0).toLocaleString()}</div>
                        <div class="stat-label">Excess Deaths</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value">${(additionalStats.expectedDeaths || 0).toLocaleString()}</div>
                        <div class="stat-label">Expected Deaths</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value">${selectedRegions.length}</div>
                        <div class="stat-label">Regions Selected</div>
                    </div>
                `;
            }

            statsGrid.innerHTML = statsHTML;
        }

        function generateCharts() {
            clearCharts();
            const chartsContainer = document.getElementById('chartsContainer');
            chartsContainer.innerHTML = '';

            // Cases over time chart
            createChart('cases-chart', 'Cases Over Time', 'cases');
            
            // Deaths over time chart
            createChart('deaths-chart', 'Deaths Over Time', 'deaths');
        }

        function createChart(chartId, title, dataField) {
            const chartsContainer = document.getElementById('chartsContainer');
            const dataType = document.getElementById('dataType').value;
            
            const chartPanel = document.createElement('div');
            chartPanel.className = 'chart-panel';
            chartPanel.innerHTML = `
                <h3>${title}</h3>
                <div class="chart-container">
                    <canvas id="${chartId}"></canvas>
                </div>
            `;
            chartsContainer.appendChild(chartPanel);

            const ctx = document.getElementById(chartId).getContext('2d');
            
            const datasets = selectedRegions.map((region, index) => {
                const regionData = getRegionData(region);
                const colors = ['#3b82f6', '#ef4444', '#10b981', '#f59e0b', '#8b5cf6', '#ec4899', '#14b8a6', '#f97316'];
                const color = colors[index % colors.length];

                let chartData = [];
                
                if (dataType === 'us-states' || dataType === 'us-counties') {
                    chartData = regionData.map(d => ({ 
                        x: d.date, 
                        y: d[dataField] || 0 
                    }));
                } else if (dataType === 'colleges') {
                    // For colleges, we only have cumulative data, not time series
                    chartData = [{ x: '2021-05-26', y: regionData[0]?.[dataField] || 0 }];
                } else if (dataType.startsWith('prisons')) {
                    // Prison data is cumulative totals, not time series
                    const data = regionData[0];
                    if (data) {
                        const value = dataField === 'cases' ? 
                            (data.total_inmate_cases || 0) + (data.total_officer_cases || 0) :
                            (data.total_inmate_deaths || 0) + (data.total_officer_deaths || 0);
                        chartData = [{ x: '2021-03-31', y: value }];
                    }
                } else if (dataType === 'excess-deaths') {
                    chartData = regionData.map(d => ({
                        x: d.start_date || d.year + '-' + (d.month || '01') + '-01',
                        y: d[dataField] || 0
                    }));
                }

                return {
                    label: region,
                    data: chartData,
                    borderColor: color,
                    backgroundColor: color + '33',
                    tension: 0.1,
                    pointRadius: dataType === 'colleges' || dataType.startsWith('prisons') ? 8 : 3
                };
            });

            let chartType = 'line';
            if (dataType === 'colleges' || dataType.startsWith('prisons')) {
                chartType = 'bar';
            }

            charts[chartId] = new Chart(ctx, {
                type: chartType,
                data: { datasets },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            labels: { color: '#ffffff' }
                        }
                    },
                    scales: {
                        x: {
                            type: chartType === 'line' ? 'time' : 'category',
                            time: chartType === 'line' ? { unit: 'day' } : undefined,
                            ticks: { color: '#ffffff' },
                            grid: { color: '#333333' }
                        },
                        y: {
                            ticks: { color: '#ffffff' },
                            grid: { color: '#333333' }
                        }
                    }
                }
            });
        }

        function getRegionData(region) {
            const dataType = document.getElementById('dataType').value;
            
            if (dataType === 'us-states') {
                return currentData.filter(d => d.state === region);
            } else if (dataType === 'us-counties') {
                const [county, state] = region.split(', ');
                return currentData.filter(d => d.county === county && d.state === state);
            } else if (dataType === 'colleges') {
                const collegeName = region.split(' (')[0]; // Remove state suffix
                return currentData.filter(d => d.college === collegeName);
            } else if (dataType === 'prisons-facilities') {
                const facilityName = region.split(' (')[0]; // Remove state suffix
                return currentData.filter(d => d.facility_name === facilityName);
            } else if (dataType === 'prisons-systems') {
                return currentData.filter(d => (d.state || d.system) === region);
            } else if (dataType === 'excess-deaths') {
                if (region.includes(', ')) {
                    const [place, country] = region.split(', ');
                    return currentData.filter(d => d.placename === place && d.country === country);
                } else {
                    return currentData.filter(d => d.country === region && !d.placename);
                }
            }
            
            return [];
        }

        function clearCharts() {
            Object.values(charts).forEach(chart => chart.destroy());
            charts = {};
        }

        function showError(message) {
            const container = document.querySelector('.container');
            const existingError = document.querySelector('.error');
            if (existingError) {
                existingError.remove();
            }
            
            const errorDiv = document.createElement('div');
            errorDiv.className = 'error';
            errorDiv.textContent = message;
            container.insertBefore(errorDiv, container.firstChild);
            
            // Auto-remove error after 5 seconds
            setTimeout(() => {
                if (errorDiv.parentNode) {
                    errorDiv.remove();
                }
            }, 5000);
        }

        function showLoading(show) {
            document.getElementById('loadingIndicator').style.display = show ? 'block' : 'none';
        }

        // Initialize the application
        document.addEventListener('DOMContentLoaded', function() {
            console.log('COVID-19 Data Dashboard initialized');
        });
    </script>
</body>
</html>