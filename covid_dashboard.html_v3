<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>COVID-19 Data Dashboard</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@3.9.1/dist/chart.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns@2.0.0/dist/chartjs-adapter-date-fns.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.4.1/papaparse.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #000000;
            color: #ffffff;
            line-height: 1.6;
            min-height: 100vh;
        }

        .header {
            background-color: #1a1a1a;
            padding: 1rem;
            border-bottom: 2px solid #1e3a8a;
            position: sticky;
            top: 0;
            z-index: 1000;
        }

        .header h1 {
            text-align: center;
            margin-bottom: 1rem;
            color: #ffffff;
        }

        .nav-menu {
            position: relative;
            display: inline-block;
            width: 100%;
        }

        .nav-dropdown {
            background-color: #1e3a8a;
            color: white;
            padding: 12px 20px;
            font-size: 16px;
            border: none;
            cursor: pointer;
            width: 100%;
            border-radius: 4px;
        }

        .nav-dropdown:hover {
            background-color: #1d4ed8;
        }

        .nav-content {
            display: none;
            position: absolute;
            background-color: #1a1a1a;
            min-width: 100%;
            box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.5);
            z-index: 1;
            border-radius: 4px;
            border: 1px solid #1e3a8a;
        }

        .nav-content a {
            color: white;
            padding: 12px 16px;
            text-decoration: none;
            display: block;
            transition: background-color 0.3s;
        }

        .nav-content a:hover {
            background-color: #1e3a8a;
        }

        .nav-menu:hover .nav-content {
            display: block;
        }

        .container {
            max-width: 100%;
            margin: 0 auto;
            padding: 2rem 1rem;
            min-height: calc(100vh - 100px);
        }

        .page {
            display: none;
        }

        .page.active {
            display: block;
        }

        .controls {
            background-color: #1a1a1a;
            padding: 1.5rem;
            margin-bottom: 2rem;
            border-radius: 8px;
            border: 1px solid #1e3a8a;
        }

        /* New compact control layout */
        .controls-row {
            display: flex;
            flex-wrap: wrap;
            gap: 1rem;
            align-items: end;
            margin-bottom: 1rem;
        }

        .controls-row:last-child {
            margin-bottom: 0;
        }

        .control-item {
            flex: 1;
            min-width: 200px;
        }

        .control-item label {
            display: block;
            margin-bottom: 0.5rem;
            color: #ffffff;
            font-weight: 500;
            font-size: 14px;
        }

        .control-item select, .control-item input {
            width: 100%;
            padding: 0.5rem;
            background-color: #333333;
            color: #ffffff;
            border: 1px solid #1e3a8a;
            border-radius: 4px;
            font-size: 14px;
        }

        .control-item select:focus, .control-item input:focus {
            outline: none;
            border-color: #3b82f6;
            box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.3);
        }

        .control-item.button-item {
            flex: 0 0 auto;
            min-width: auto;
            display: flex;
            align-items: end;
        }

        .button {
            background-color: #1e3a8a;
            color: white;
            padding: 0.5rem 1rem;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
            transition: background-color 0.3s;
            white-space: nowrap;
        }

        .button:hover {
            background-color: #1d4ed8;
        }

        .button:disabled {
            background-color: #666666;
            cursor: not-allowed;
        }

        .button.active {
            background-color: #10b981;
        }

        .button.active:hover {
            background-color: #059669;
        }

        .selected-regions {
            background-color: #1a1a1a;
            padding: 1rem;
            margin-bottom: 2rem;
            border-radius: 8px;
            border: 1px solid #1e3a8a;
        }

        /* New compact header layout for selected regions */
        .regions-header {
            display: flex;
            flex-wrap: wrap;
            justify-content: space-between;
            align-items: center;
            gap: 1rem;
            margin-bottom: 1rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid #333333;
        }

        .regions-title {
            font-size: 16px;
            font-weight: 600;
            color: #ffffff;
            margin: 0;
        }

        .regions-controls {
            display: flex;
            gap: 0.5rem;
            flex-wrap: wrap;
        }

        .region-tag {
            display: inline-block;
            background-color: #1e3a8a;
            color: white;
            padding: 0.5rem 1rem;
            margin: 0.25rem;
            border-radius: 20px;
            font-size: 14px;
            position: relative;
        }

        .region-tag .data-type {
            font-size: 11px;
            opacity: 0.7;
            margin-left: 0.5rem;
        }

        .remove-region {
            margin-left: 0.5rem;
            cursor: pointer;
            font-weight: bold;
        }

        /* Overlay data selector for mixed region types */
        .overlay-controls {
            background-color: #2a2a2a;
            padding: 1rem;
            margin-top: 1rem;
            border-radius: 8px;
            border: 1px solid #1e3a8a;
            display: none;
        }

        .overlay-controls.visible {
            display: block;
        }

        .overlay-title {
            font-size: 14px;
            font-weight: 600;
            color: #ffffff;
            margin-bottom: 1rem;
        }

        .overlay-options {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 1rem;
        }

        .overlay-group {
            background-color: #333333;
            padding: 1rem;
            border-radius: 4px;
            border: 1px solid #444444;
        }

        .overlay-group h4 {
            font-size: 12px;
            color: #cccccc;
            margin-bottom: 0.5rem;
            text-transform: uppercase;
        }

        .overlay-checkbox {
            display: flex;
            align-items: center;
            margin-bottom: 0.5rem;
        }

        .overlay-checkbox input[type="checkbox"] {
            margin-right: 0.5rem;
            transform: scale(1.2);
        }

        .overlay-checkbox label {
            font-size: 12px;
            color: #ffffff;
            cursor: pointer;
        }

        .charts-container {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(500px, 1fr));
            gap: 2rem;
            margin-bottom: 2rem;
        }

        .chart-panel {
            background-color: #1a1a1a;
            padding: 2rem;
            border-radius: 8px;
            border: 1px solid #1e3a8a;
        }

        .chart-panel h3 {
            margin-bottom: 1rem;
            color: #ffffff;
            text-align: center;
        }

        .chart-container {
            position: relative;
            height: 350px;
            width: 100%;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin-bottom: 2rem;
        }

        .stat-card {
            background-color: #1a1a1a;
            padding: 1.5rem;
            border-radius: 8px;
            border: 1px solid #1e3a8a;
            text-align: center;
        }

        .stat-value {
            font-size: 2rem;
            font-weight: bold;
            color: #3b82f6;
            margin-bottom: 0.5rem;
        }

        .stat-label {
            color: #cccccc;
            font-size: 0.9rem;
        }

        .comparison-table {
            background-color: #1a1a1a;
            border-radius: 8px;
            border: 1px solid #1e3a8a;
            margin-bottom: 2rem;
            overflow-x: auto;
        }

        .comparison-table table {
            width: 100%;
            border-collapse: collapse;
        }

        .comparison-table th,
        .comparison-table td {
            padding: 1rem;
            text-align: left;
            border-bottom: 1px solid #333333;
        }

        .comparison-table th {
            background-color: #1e3a8a;
            color: white;
            font-weight: 600;
        }

        .comparison-table tr:hover {
            background-color: #333333;
        }

        .loading {
            text-align: center;
            padding: 2rem;
            color: #cccccc;
        }

        .error {
            background-color: #dc2626;
            color: white;
            padding: 1rem;
            border-radius: 4px;
            margin: 1rem 0;
        }

        .info-section {
            background-color: #1a1a1a;
            padding: 2rem;
            margin-bottom: 2rem;
            border-radius: 8px;
            border: 1px solid #1e3a8a;
        }

        .info-section h2 {
            color: #3b82f6;
            margin-bottom: 1rem;
        }

        .info-section h3 {
            color: #ffffff;
            margin: 1.5rem 0 1rem 0;
        }

        .info-section p, .info-section li {
            margin-bottom: 0.5rem;
            color: #cccccc;
        }

        .info-section ul {
            margin-left: 2rem;
        }

        /* Responsive design improvements */
        @media (max-width: 1200px) {
            .container {
                max-width: 100%;
                padding: 1rem;
            }
            
            .charts-container {
                grid-template-columns: 1fr;
            }
        }

        @media (max-width: 768px) {
            .controls-row {
                flex-direction: column;
            }

            .control-item {
                min-width: 100%;
            }

            .regions-header {
                flex-direction: column;
                align-items: flex-start;
            }

            .regions-controls {
                width: 100%;
                justify-content: flex-start;
            }

            .chart-panel {
                padding: 1rem;
            }

            .overlay-options {
                grid-template-columns: 1fr;
            }

            .stats-grid {
                grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            }
        }

        @media (max-width: 600px) {
            .chart-container {
                height: 300px;
            }

            .button {
                padding: 0.4rem 0.8rem;
                font-size: 12px;
            }
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>COVID-19 Data Analysis Dashboard</h1>
        <div class="nav-menu">
            <button class="nav-dropdown">Navigation Menu</button>
            <div class="nav-content">
                <a href="#" onclick="showPage('dashboard')">Data Dashboard</a>
                <a href="election_dashboard.html">Election Data Dashboard</a>
                <a href="#" onclick="showPage('acknowledgments')">Acknowledgments</a>
                <a href="#" onclick="showPage('methodology')">Data Methodology</a>
            </div>
        </div>
    </div>

    <div class="container">
        <!-- Main Dashboard Page -->
        <div id="dashboard" class="page active">
            <div class="controls">
                <!-- First row: Data type, region selector, and add button -->
                <div class="controls-row">
                    <div class="control-item">
                        <label for="dataType">Data Type:</label>
                        <select id="dataType" onchange="loadData()">
                            <option value="">Select Data Type</option>
                            <option value="us-states">US States</option>
                            <option value="us-counties">US Counties (Recent)</option>
                            <option value="colleges">Colleges & Universities</option>
                            <option value="prisons-facilities">Prison Facilities</option>
                            <option value="prisons-systems">Prison Systems</option>
                            <option value="excess-deaths">Excess Deaths (Global)</option>
                            <option value="mask-use">Mask Use Survey</option>
                        </select>
                    </div>

                    <div class="control-item">
                        <label for="regionSelect">Select Region:</label>
                        <select id="regionSelect" disabled>
                            <option value="">Choose data type first</option>
                        </select>
                    </div>

                    <div class="control-item button-item">
                        <button class="button" onclick="addRegion()" id="addRegionBtn" disabled>Add Region</button>
                    </div>
                </div>

                <!-- Second row: Date range and update button -->
                <div class="controls-row">
                    <div class="control-item">
                        <label for="startDate">Start Date:</label>
                        <input type="date" id="startDate" disabled>
                    </div>

                    <div class="control-item">
                        <label for="endDate">End Date:</label>
                        <input type="date" id="endDate" disabled>
                    </div>

                    <div class="control-item button-item">
                        <button class="button" onclick="updateCharts()" id="updateBtn" disabled>Update Charts</button>
                    </div>
                </div>
            </div>

            <div class="selected-regions">
                <!-- Compact header with controls -->
                <div class="regions-header">
                    <h3 class="regions-title">Selected Regions for Comparison:</h3>
                    <div class="regions-controls">
                        <button class="button" onclick="toggleComparisonMode()" id="comparisonBtn" disabled>Show Comparison Table</button>
                        <button class="button" onclick="toggleChartMode()" id="chartModeBtn" disabled>Cumulative View</button>
                        <button class="button" onclick="clearRegions()">Clear All</button>
                    </div>
                </div>

                <!-- Region tags -->
                <div id="regionTags">
                    <p>No regions selected</p>
                </div>

                <!-- Overlay data selector for mixed region types -->
                <div class="overlay-controls" id="overlayControls">
                    <div class="overlay-title">Select Data Points to Display (Mixed Region Types)</div>
                    <div class="overlay-options" id="overlayOptions">
                        <!-- Dynamic overlay options will be generated here -->
                    </div>
                    <div style="margin-top: 1rem;">
                        <button class="button" onclick="updateOverlayCharts()">Update Overlay View</button>
                    </div>
                </div>
            </div>

            <div class="comparison-table" id="comparisonTable" style="display: none;">
                <!-- Comparison table will be dynamically generated -->
            </div>

            <div class="stats-grid" id="statsGrid" style="display: none;">
                <!-- Stats cards will be dynamically generated -->
            </div>

            <div class="charts-container" id="chartsContainer" style="display: none;">
                <!-- Charts will be dynamically generated -->
            </div>

            <div class="loading" id="loadingIndicator" style="display: none;">
                Loading data...
            </div>
        </div>

        <!-- Acknowledgments Page -->
        <div id="acknowledgments" class="page">
            <div class="info-section">
                <h2>Acknowledgments</h2>
                <p>This dashboard is built using COVID-19 data collected by The New York Times. We extend our gratitude to all contributors and data sources.</p>
                
                <h3>Data Sources</h3>
                <ul>
                    <li><strong>Primary Data:</strong> The New York Times COVID-19 Data Repository</li>
                    <li><strong>US Cases and Deaths:</strong> State and local government health departments</li>
                    <li><strong>College Data:</strong> Survey of American colleges and universities</li>
                    <li><strong>Prison Data:</strong> State and federal prison systems, ICE, local jails</li>
                    <li><strong>Excess Deaths:</strong> National and municipal health departments, vital statistics offices</li>
                    <li><strong>Mask Usage:</strong> Dynata survey data</li>
                </ul>

                <h3>Contributors</h3>
                <p>Data collection and analysis by dozens of journalists at The New York Times, including:</p>
                <ul>
                    <li>Sarah Almukhtar, Aliza Aufrichtig, Anne Barnard, Matthew Bloch</li>
                    <li>Weiyi Cai, Julia Calderone, Keith Collins, Matthew Conlen</li>
                    <li>Lindsey Cook, Gabriel Gianordoli, Amy Harmon, Rich Harris</li>
                    <li>Adeel Hassan, Jon Huang, Danya Issawi, Danielle Ivory</li>
                    <li>K.K. Rebecca Lai, Alex Lemonides, Allison McCann</li>
                    <li>And many other dedicated journalists and researchers</li>
                </ul>

                <h3>Technical Acknowledgments</h3>
                <ul>
                    <li><strong>Visualization:</strong> Chart.js for interactive charts</li>
                    <li><strong>Data Processing:</strong> Papa Parse for CSV handling</li>
                    <li><strong>Design:</strong> Responsive design principles for mobile compatibility</li>
                </ul>

                <h3>License</h3>
                <p>This data is licensed under Creative Commons Attribution-NonCommercial 4.0 International license. The data is made publicly available for broad, noncommercial public use including by medical and public health researchers, policymakers, analysts and local news media.</p>
            </div>
        </div>

        <!-- Methodology Page -->
        <div id="methodology" class="page">
            <div class="info-section">
                <h2>Data Collection Methodology and Caveats</h2>
                
                <h3>General Methodology</h3>
                <p>The data presented in this dashboard is the product of extensive journalistic effort by The New York Times, monitoring news conferences, analyzing data releases, and seeking clarification from public officials across multiple time zones.</p>

                <h3>Data Collection Challenges</h3>
                <ul>
                    <li><strong>Fragmented Reporting:</strong> The American public health system's fragmented nature has led to inconsistent reporting across jurisdictions</li>
                    <li><strong>Corrections and Updates:</strong> Officials have sometimes corrected information hours or days after first reporting</li>
                    <li><strong>Disappearing Cases:</strong> Cases have occasionally disappeared from databases or been moved between jurisdictions</li>
                    <li><strong>Varying Standards:</strong> Different jurisdictions use different criteria for case classification</li>
                </ul>

                <h3>Confirmed vs. Probable Cases</h3>
                <p><strong>Confirmed Cases:</strong> Individuals whose coronavirus infections were confirmed by a laboratory test (molecular or RT-PCR tests)</p>
                <p><strong>Probable Cases:</strong> Individuals evaluated by public health officials using federal and state criteria, including antigen/antibody tests combined with clinical evidence</p>

                <h3>Geographic Considerations</h3>
                <ul>
                    <li><strong>Treatment Location:</strong> When available, patients are counted where they are being treated, not necessarily where they live</li>
                    <li><strong>New York City:</strong> All five boroughs are combined into a single area</li>
                    <li><strong>Geographic Exceptions:</strong> Some regions have special reporting arrangements documented in the methodology</li>
                </ul>

                <h3>College Data Specifics</h3>
                <ul>
                    <li>Survey of 1,900+ colleges conducted July 2020 - May 2021</li>
                    <li>Includes all four-year public institutions and private colleges competing in NCAA sports</li>
                    <li>Cases include students, faculty, staff, and medical personnel</li>
                    <li>Reporting methods vary significantly between institutions</li>
                </ul>

                <h3>Prison Data Specifics</h3>
                <ul>
                    <li>No uniform national reporting system existed</li>
                    <li>Data collected through websites, direct inquiries, and public records requests</li>
                    <li>Includes 2,805 facilities across state/federal prisons, ICE centers, jails</li>
                    <li>Likely represents undercounts due to limited testing</li>
                </ul>

                <h3>Important Limitations</h3>
                <ul>
                    <li><strong>Testing Limitations:</strong> Widespread shortage of testing affects case counts</li>
                    <li><strong>Delayed Reporting:</strong> Some jurisdictions experience significant delays</li>
                    <li><strong>Methodology Changes:</strong> Reporting criteria have evolved over time</li>
                    <li><strong>Undercount Likelihood:</strong> True case numbers are likely higher than reported</li>
                </ul>

                <h3>Data Updates</h3>
                <p><strong>Note:</strong> As of March 24, 2023, The New York Times stopped updating daily cases and deaths data. This repository serves as an archive of virus data reporting from 2020-2023.</p>
            </div>
        </div>
    </div>

    <script>
        // Global variables
        let allDataSets = {};
        let selectedRegions = [];
        let selectedDataTypes = [];
        let charts = {};
        let showComparison = false;
        let cumulativeMode = false;
        let overlayMode = false;
        let overlaySelections = {};

        // Navigation functions
        function showPage(pageId) {
            document.querySelectorAll('.page').forEach(page => {
                page.classList.remove('active');
            });
            document.getElementById(pageId).classList.add('active');
        }

        // Data loading functions
        async function loadData() {
            const dataType = document.getElementById('dataType').value;
            if (!dataType) return;

            // If we already have this data, just populate the select
            if (allDataSets[dataType]) {
                populateRegionSelect(dataType);
                enableControls();
                return;
            }

            showLoading(true);
            
            try {
                let csvFile = '';
                switch(dataType) {
                    case 'us-states':
                        csvFile = 'nytimes_covid-19-data/us-states.csv';
                        break;
                    case 'us-counties':
                        csvFile = 'nytimes_covid-19-data/us-counties-recent.csv';
                        break;
                    case 'colleges':
                        csvFile = 'nytimes_covid-19-data/colleges/colleges.csv';
                        break;
                    case 'prisons-facilities':
                        csvFile = 'nytimes_covid-19-data/prisons/facilities.csv';
                        break;
                    case 'prisons-systems':
                        csvFile = 'nytimes_covid-19-data/prisons/systems.csv';
                        break;
                    case 'excess-deaths':
                        csvFile = 'nytimes_covid-19-data/excess-deaths/deaths.csv';
                        break;
                    case 'mask-use':
                        csvFile = 'nytimes_covid-19-data/mask-use/mask-use-by-county.csv';
                        break;
                    default:
                        throw new Error('Unknown data type');
                }

                console.log('Loading CSV file:', csvFile);
                
                const response = await fetch(csvFile);
                if (!response.ok) {
                    throw new Error(`Failed to load ${csvFile}: ${response.statusText} (${response.status})`);
                }
                
                const csvText = await response.text();
                console.log(`CSV loaded (${csvText.length} characters), parsing...`);
                
                if (typeof Papa === 'undefined') {
                    throw new Error('Papa Parse library not loaded. Please check your internet connection.');
                }
                
                const parsedData = Papa.parse(csvText, {
                    header: true,
                    dynamicTyping: true,
                    skipEmptyLines: true
                });

                if (parsedData.errors.length > 0) {
                    console.warn('CSV parsing errors:', parsedData.errors);
                }

                const cleanData = parsedData.data.filter(row => {
                    return Object.values(row).some(value => value !== null && value !== '');
                });
                
                allDataSets[dataType] = cleanData;
                console.log(`Loaded ${cleanData.length} rows of ${dataType} data`);
                
                populateRegionSelect(dataType);
                enableControls();
                showLoading(false);
                
            } catch (error) {
                console.error('Error loading data:', error);
                showError(`Failed to load data: ${error.message}`);
                showLoading(false);
            }
        }

        function populateRegionSelect(dataType) {
            const regionSelect = document.getElementById('regionSelect');
            regionSelect.innerHTML = '<option value="">Select a region</option>';
            
            const currentData = allDataSets[dataType];
            if (!currentData) return;

            try {
                let regions = [];
                
                if (dataType === 'us-states') {
                    regions = [...new Set(currentData.map(d => d.state))].filter(Boolean).sort();
                } else if (dataType === 'us-counties') {
                    // Sort by state, then county
                    const countyData = [...new Set(currentData.map(d => `${d.state}||${d.county}`))].filter(Boolean);
                    regions = countyData.map(item => {
                        const [state, county] = item.split('||');
                        return { state, county, display: `${county}, ${state}` };
                    }).sort((a, b) => {
                        if (a.state !== b.state) return a.state.localeCompare(b.state);
                        return a.county.localeCompare(b.county);
                    }).map(item => item.display);
                } else if (dataType === 'colleges') {
                    // Sort by state, then college name
                    const collegeData = currentData.map(d => ({
                        state: d.state,
                        college: d.college,
                        display: `${d.college} (${d.state})`
                    })).filter(item => item.state && item.college)
                    .sort((a, b) => {
                        if (a.state !== b.state) return a.state.localeCompare(b.state);
                        return a.college.localeCompare(b.college);
                    });
                    regions = [...new Set(collegeData.map(item => item.display))];
                } else if (dataType === 'prisons-facilities') {
                    const facilityData = currentData.map(d => ({
                        state: d.facility_state,
                        facility: d.facility_name,
                        display: `${d.facility_name} (${d.facility_state})`
                    })).filter(item => item.state && item.facility)
                    .sort((a, b) => {
                        if (a.state !== b.state) return a.state.localeCompare(b.state);
                        return a.facility.localeCompare(b.facility);
                    });
                    regions = [...new Set(facilityData.map(item => item.display))];
                } else if (dataType === 'prisons-systems') {
                    regions = [...new Set(currentData.map(d => d.state || d.system))].filter(Boolean).sort();
                } else if (dataType === 'excess-deaths') {
                    regions = [...new Set(currentData.map(d => d.placename ? `${d.placename}, ${d.country}` : d.country))].filter(Boolean).sort();
                } else if (dataType === 'mask-use') {
                    const message = document.createElement('option');
                    message.value = '';
                    message.textContent = 'Mask use data shows county-level percentages by FIPS code';
                    regionSelect.appendChild(message);
                    return;
                }

                console.log(`Found ${regions.length} regions for ${dataType}`);

                regions.forEach(region => {
                    const option = document.createElement('option');
                    option.value = region;
                    option.textContent = region;
                    regionSelect.appendChild(option);
                });

                regionSelect.disabled = false;
                document.getElementById('addRegionBtn').disabled = false;
                
            } catch (error) {
                console.error('Error populating region select:', error);
                showError('Error loading region data');
            }
        }

        function enableControls() {
            document.getElementById('startDate').disabled = false;
            document.getElementById('endDate').disabled = false;
            document.getElementById('updateBtn').disabled = false;
        }

        function addRegion() {
            const regionSelect = document.getElementById('regionSelect');
            const selectedRegion = regionSelect.value;
            const dataType = document.getElementById('dataType').value;

            if (selectedRegion && !selectedRegions.includes(selectedRegion)) {
                selectedRegions.push(selectedRegion);
                selectedDataTypes.push(dataType);
                updateRegionTags();
                updateOverlayControls();
                updateCharts();
                
                // Enable comparison controls
                document.getElementById('comparisonBtn').disabled = false;
                document.getElementById('chartModeBtn').disabled = false;
                
                regionSelect.value = '';
            }
        }

        function removeRegion(region) {
            const index = selectedRegions.indexOf(region);
            if (index > -1) {
                selectedRegions.splice(index, 1);
                selectedDataTypes.splice(index, 1);
            }
            updateRegionTags();
            updateOverlayControls();
            updateCharts();
            
            if (selectedRegions.length === 0) {
                document.getElementById('comparisonBtn').disabled = true;
                document.getElementById('chartModeBtn').disabled = true;
                document.getElementById('comparisonTable').style.display = 'none';
                document.getElementById('overlayControls').classList.remove('visible');
            }
        }

        function clearRegions() {
            selectedRegions = [];
            selectedDataTypes = [];
            overlaySelections = {};
            updateRegionTags();
            updateOverlayControls();
            clearCharts();
            document.getElementById('comparisonBtn').disabled = true;
            document.getElementById('chartModeBtn').disabled = true;
            document.getElementById('comparisonTable').style.display = 'none';
            document.getElementById('overlayControls').classList.remove('visible');
        }

        function updateRegionTags() {
            const tagsContainer = document.getElementById('regionTags');
            
            if (selectedRegions.length === 0) {
                tagsContainer.innerHTML = '<p>No regions selected</p>';
                return;
            }

            tagsContainer.innerHTML = selectedRegions.map((region, index) => {
                const dataTypeLabel = selectedDataTypes[index].replace('-', ' ');
                return `<span class="region-tag">
                    ${region}
                    <span class="data-type">[${dataTypeLabel}]</span>
                    <span class="remove-region" onclick="removeRegion('${region.replace(/'/g, "\\'")}')">×</span>
                </span>`;
            }).join('');
        }

        function updateOverlayControls() {
            const overlayControls = document.getElementById('overlayControls');
            const overlayOptions = document.getElementById('overlayOptions');
            
            // Check if we have mixed data types
            const uniqueDataTypes = [...new Set(selectedDataTypes)];
            
            if (uniqueDataTypes.length > 1 && selectedRegions.length > 0) {
                overlayControls.classList.add('visible');
                
                // Generate overlay options for each data type
                overlayOptions.innerHTML = '';
                
                uniqueDataTypes.forEach(dataType => {
                    const group = document.createElement('div');
                    group.className = 'overlay-group';
                    
                    const title = document.createElement('h4');
                    title.textContent = dataType.replace('-', ' ').toUpperCase();
                    group.appendChild(title);
                    
                    // Get available data fields for this data type
                    const dataFields = getDataFieldsForType(dataType);
                    
                    dataFields.forEach(field => {
                        const checkbox = document.createElement('div');
                        checkbox.className = 'overlay-checkbox';
                        
                        const input = document.createElement('input');
                        input.type = 'checkbox';
                        input.id = `overlay-${dataType}-${field.key}`;
                        input.checked = overlaySelections[`${dataType}-${field.key}`] || false;
                        input.onchange = () => {
                            overlaySelections[`${dataType}-${field.key}`] = input.checked;
                        };
                        
                        const label = document.createElement('label');
                        label.htmlFor = input.id;
                        label.textContent = field.label;
                        
                        checkbox.appendChild(input);
                        checkbox.appendChild(label);
                        group.appendChild(checkbox);
                    });
                    
                    overlayOptions.appendChild(group);
                });
            } else {
                overlayControls.classList.remove('visible');
            }
        }

        function getDataFieldsForType(dataType) {
            const fieldMappings = {
                'us-states': [
                    { key: 'cases', label: 'Cases' },
                    { key: 'deaths', label: 'Deaths' }
                ],
                'us-counties': [
                    { key: 'cases', label: 'Cases' },
                    { key: 'deaths', label: 'Deaths' }
                ],
                'colleges': [
                    { key: 'cases', label: 'Total Cases' },
                    { key: 'cases_2021', label: '2021 Cases' }
                ],
                'prisons-facilities': [
                    { key: 'inmate_cases', label: 'Inmate Cases' },
                    { key: 'officer_cases', label: 'Officer Cases' },
                    { key: 'inmate_deaths', label: 'Inmate Deaths' },
                    { key: 'officer_deaths', label: 'Officer Deaths' }
                ],
                'prisons-systems': [
                    { key: 'inmate_cases', label: 'Inmate Cases' },
                    { key: 'officer_cases', label: 'Officer Cases' },
                    { key: 'inmate_deaths', label: 'Inmate Deaths' },
                    { key: 'officer_deaths', label: 'Officer Deaths' }
                ],
                'excess-deaths': [
                    { key: 'excess_deaths', label: 'Excess Deaths' },
                    { key: 'expected_deaths', label: 'Expected Deaths' }
                ]
            };
            
            return fieldMappings[dataType] || [];
        }

        function toggleComparisonMode() {
            showComparison = !showComparison;
            const btn = document.getElementById('comparisonBtn');
            const table = document.getElementById('comparisonTable');
            
            if (showComparison) {
                btn.textContent = 'Hide Comparison Table';
                btn.classList.add('active');
                generateComparisonTable();
                table.style.display = 'block';
            } else {
                btn.textContent = 'Show Comparison Table';
                btn.classList.remove('active');
                table.style.display = 'none';
            }
        }

        function toggleChartMode() {
            cumulativeMode = !cumulativeMode;
            const btn = document.getElementById('chartModeBtn');
            
            if (cumulativeMode) {
                btn.textContent = 'Individual View';
                btn.classList.add('active');
            } else {
                btn.textContent = 'Cumulative View';
                btn.classList.remove('active');
            }
            
            updateCharts();
        }

        function updateOverlayCharts() {
            overlayMode = true;
            updateCharts();
        }

        function generateComparisonTable() {
            const table = document.getElementById('comparisonTable');
            
            let tableHTML = '<table><thead><tr><th>Region</th><th>Type</th><th>Cases/Data</th><th>Deaths/Info</th><th>Additional Info</th></tr></thead><tbody>';
            
            selectedRegions.forEach((region, index) => {
                const dataType = selectedDataTypes[index];
                const regionData = getRegionData(region, dataType);
                
                if (regionData.length > 0) {
                    tableHTML += '<tr>';
                    tableHTML += `<td>${region}</td>`;
                    tableHTML += `<td>${dataType.replace('-', ' ')}</td>`;
                    
                    if (dataType === 'us-states' || dataType === 'us-counties') {
                        const latestData = regionData[regionData.length - 1];
                        const cases = latestData.cases || 0;
                        const deaths = latestData.deaths || 0;
                        const cfr = cases > 0 ? ((deaths / cases) * 100).toFixed(2) : 0;
                        
                        tableHTML += `<td>${cases.toLocaleString()}</td>`;
                        tableHTML += `<td>${deaths.toLocaleString()}</td>`;
                        tableHTML += `<td>CFR: ${cfr}% | Date: ${latestData.date || 'N/A'}</td>`;
                    } else if (dataType === 'colleges') {
                        const data = regionData[0];
                        tableHTML += `<td>${(data.cases || 0).toLocaleString()}</td>`;
                        tableHTML += `<td>${(data.cases_2021 || 0).toLocaleString()}</td>`;
                        tableHTML += `<td>State: ${data.state || 'N/A'}</td>`;
                    } else if (dataType.startsWith('prisons')) {
                        const data = regionData[0];
                        const totalCases = (data.total_inmate_cases || 0) + (data.total_officer_cases || 0);
                        const totalDeaths = (data.total_inmate_deaths || 0) + (data.total_officer_deaths || 0);
                        tableHTML += `<td>${totalCases.toLocaleString()}</td>`;
                        tableHTML += `<td>${totalDeaths.toLocaleString()}</td>`;
                        tableHTML += `<td>Pop: ${data.latest_inmate_population || data.max_inmate_population_2020 || 'N/A'}</td>`;
                    } else if (dataType === 'excess-deaths') {
                        const totalExcess = regionData.reduce((sum, d) => sum + (d.excess_deaths || 0), 0);
                        const totalExpected = regionData.reduce((sum, d) => sum + (d.expected_deaths || 0), 0);
                        tableHTML += `<td>${totalExcess.toLocaleString()}</td>`;
                        tableHTML += `<td>${totalExpected.toLocaleString()}</td>`;
                        tableHTML += `<td>Excess vs Expected</td>`;
                    } else {
                        tableHTML += `<td>N/A</td><td>N/A</td><td>N/A</td>`;
                    }
                    
                    tableHTML += '</tr>';
                }
            });
            
            tableHTML += '</tbody></table>';
            table.innerHTML = tableHTML;
        }

        function updateCharts() {
            if (selectedRegions.length === 0) {
                document.getElementById('chartsContainer').style.display = 'none';
                document.getElementById('statsGrid').style.display = 'none';
                return;
            }

            generateStatistics();
            generateCharts();
            document.getElementById('chartsContainer').style.display = 'grid';
            document.getElementById('statsGrid').style.display = 'grid';
        }

        function generateStatistics() {
            const statsGrid = document.getElementById('statsGrid');
            
            let totalCases = 0;
            let totalDeaths = 0;
            let additionalStats = {};

            selectedRegions.forEach((region, index) => {
                const dataType = selectedDataTypes[index];
                const regionData = getRegionData(region, dataType);
                
                if (regionData.length > 0) {
                    if (dataType === 'us-states' || dataType === 'us-counties') {
                        const latestData = regionData[regionData.length - 1];
                        totalCases += latestData.cases || 0;
                        totalDeaths += latestData.deaths || 0;
                    } else if (dataType === 'colleges') {
                        const data = regionData[0];
                        totalCases += data.cases || 0;
                        additionalStats.cases2021 = (additionalStats.cases2021 || 0) + (data.cases_2021 || 0);
                    } else if (dataType.startsWith('prisons')) {
                        const data = regionData[0];
                        totalCases += (data.total_inmate_cases || 0) + (data.total_officer_cases || 0);
                        totalDeaths += (data.total_inmate_deaths || 0) + (data.total_officer_deaths || 0);
                    } else if (dataType === 'excess-deaths') {
                        regionData.forEach(d => {
                            additionalStats.excessDeaths = (additionalStats.excessDeaths || 0) + (d.excess_deaths || 0);
                            additionalStats.expectedDeaths = (additionalStats.expectedDeaths || 0) + (d.expected_deaths || 0);
                        });
                    }
                }
            });

            let statsHTML = `
                <div class="stat-card">
                    <div class="stat-value">${totalCases.toLocaleString()}</div>
                    <div class="stat-label">Total Cases/Data Points</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value">${totalDeaths.toLocaleString()}</div>
                    <div class="stat-label">Total Deaths/Secondary Data</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value">${selectedRegions.length}</div>
                    <div class="stat-label">Regions Selected</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value">${new Set(selectedDataTypes).size}</div>
                    <div class="stat-label">Data Types</div>
                </div>
            `;

            statsGrid.innerHTML = statsHTML;
        }

        function generateCharts() {
            clearCharts();
            const chartsContainer = document.getElementById('chartsContainer');
            chartsContainer.innerHTML = '';

            // Check if we have mixed data types and overlay mode is enabled
            const uniqueDataTypes = [...new Set(selectedDataTypes)];
            
            if (uniqueDataTypes.length > 1 && overlayMode && Object.keys(overlaySelections).some(key => overlaySelections[key])) {
                createOverlayChart();
                overlayMode = false; // Reset overlay mode after creating chart
            } else {
                // Group regions by data type for better visualization
                const dataTypeGroups = {};
                selectedRegions.forEach((region, index) => {
                    const dataType = selectedDataTypes[index];
                    if (!dataTypeGroups[dataType]) {
                        dataTypeGroups[dataType] = [];
                    }
                    dataTypeGroups[dataType].push(region);
                });

                // Create charts for each data type group
                Object.keys(dataTypeGroups).forEach(dataType => {
                    if (dataType === 'us-states' || dataType === 'us-counties') {
                        createTimeSeriesChart(`${dataType}-cases`, `${dataType} - Cases Over Time`, 'cases', dataTypeGroups[dataType], dataType);
                        createTimeSeriesChart(`${dataType}-deaths`, `${dataType} - Deaths Over Time`, 'deaths', dataTypeGroups[dataType], dataType);
                    } else {
                        createBarChart(`${dataType}-comparison`, `${dataType} - Comparison`, 'cases', dataTypeGroups[dataType], dataType);
                    }
                });

                // If we have mixed data types, create a normalized comparison
                if (uniqueDataTypes.length > 1) {
                    createMixedComparisonChart();
                }
            }
        }

        function createOverlayChart() {
            const chartsContainer = document.getElementById('chartsContainer');
            
            const chartPanel = document.createElement('div');
            chartPanel.className = 'chart-panel';
            chartPanel.innerHTML = `
                <h3>Custom Overlay Comparison</h3>
                <div class="chart-container">
                    <canvas id="overlay-chart"></canvas>
                </div>
            `;
            chartsContainer.appendChild(chartPanel);

            const ctx = document.getElementById('overlay-chart').getContext('2d');
            
            const datasets = [];
            const colors = ['#3b82f6', '#ef4444', '#10b981', '#f59e0b', '#8b5cf6', '#ec4899', '#14b8a6', '#f97316'];
            let colorIndex = 0;

            selectedRegions.forEach((region, regionIndex) => {
                const dataType = selectedDataTypes[regionIndex];
                const regionData = getRegionData(region, dataType);
                
                // Check which data fields are selected for this data type
                const dataFields = getDataFieldsForType(dataType);
                
                dataFields.forEach(field => {
                    const selectionKey = `${dataType}-${field.key}`;
                    if (overlaySelections[selectionKey]) {
                        const color = colors[colorIndex % colors.length];
                        colorIndex++;
                        
                        let value = 0;
                        if (regionData.length > 0) {
                            const data = regionData[0];
                            if (field.key === 'cases') {
                                value = data.cases || 0;
                            } else if (field.key === 'deaths') {
                                value = data.deaths || 0;
                            } else if (field.key === 'cases_2021') {
                                value = data.cases_2021 || 0;
                            } else if (field.key === 'inmate_cases') {
                                value = data.total_inmate_cases || 0;
                            } else if (field.key === 'officer_cases') {
                                value = data.total_officer_cases || 0;
                            } else if (field.key === 'inmate_deaths') {
                                value = data.total_inmate_deaths || 0;
                            } else if (field.key === 'officer_deaths') {
                                value = data.total_officer_deaths || 0;
                            } else if (field.key === 'excess_deaths') {
                                value = regionData.reduce((sum, d) => sum + (d.excess_deaths || 0), 0);
                            } else if (field.key === 'expected_deaths') {
                                value = regionData.reduce((sum, d) => sum + (d.expected_deaths || 0), 0);
                            }
                        }

                        datasets.push({
                            label: `${region} - ${field.label}`,
                            data: [value],
                            backgroundColor: color,
                            borderColor: color,
                            borderWidth: 1
                        });
                    }
                });
            });

            const chartConfig = {
                type: 'bar',
                data: {
                    labels: ['Selected Data Points'],
                    datasets: datasets
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            labels: { 
                                color: '#ffffff',
                                padding: 20
                            }
                        },
                        tooltip: {
                            backgroundColor: 'rgba(0, 0, 0, 0.8)',
                            titleColor: '#ffffff',
                            bodyColor: '#ffffff',
                            borderColor: '#1e3a8a',
                            borderWidth: 1
                        }
                    },
                    scales: {
                        x: {
                            ticks: { color: '#ffffff' },
                            grid: { color: '#333333' }
                        },
                        y: {
                            type: 'logarithmic',
                            ticks: { 
                                color: '#ffffff',
                                callback: function(value) {
                                    return value.toLocaleString();
                                }
                            },
                            grid: { color: '#333333' },
                            title: {
                                display: true,
                                text: 'Values (Log Scale)',
                                color: '#ffffff'
                            }
                        }
                    }
                }
            };

            try {
                charts['overlay-chart'] = new Chart(ctx, chartConfig);
                console.log('Overlay chart created successfully');
            } catch (error) {
                console.error('Error creating overlay chart:', error);
                chartPanel.innerHTML = `<h3>Custom Overlay Comparison</h3><p style="color: #ff6b6b; text-align: center; padding: 2rem;">Error creating chart: ${error.message}</p>`;
            }
        }

        function createTimeSeriesChart(chartId, title, dataField, regions, dataType) {
            const chartsContainer = document.getElementById('chartsContainer');
            
            const chartPanel = document.createElement('div');
            chartPanel.className = 'chart-panel';
            chartPanel.innerHTML = `
                <h3>${title}</h3>
                <div class="chart-container">
                    <canvas id="${chartId}"></canvas>
                </div>
            `;
            chartsContainer.appendChild(chartPanel);

            const ctx = document.getElementById(chartId).getContext('2d');
            
            const datasets = regions.map((region, index) => {
                const regionData = getRegionData(region, dataType);
                const colors = ['#3b82f6', '#ef4444', '#10b981', '#f59e0b', '#8b5cf6', '#ec4899', '#14b8a6', '#f97316'];
                const color = colors[index % colors.length];

                const startDate = document.getElementById('startDate').value;
                const endDate = document.getElementById('endDate').value;
                
                let filteredData = regionData;
                if (startDate && endDate) {
                    filteredData = regionData.filter(d => {
                        const recordDate = new Date(d.date);
                        return recordDate >= new Date(startDate) && recordDate <= new Date(endDate);
                    });
                }
                
                let chartData;
                if (cumulativeMode) {
                    chartData = filteredData.map(d => ({ 
                        x: d.date, 
                        y: d[dataField] || 0 
                    }));
                } else {
                    chartData = [];
                    for (let i = 1; i < filteredData.length; i++) {
                        const current = filteredData[i][dataField] || 0;
                        const previous = filteredData[i-1][dataField] || 0;
                        const daily = Math.max(0, current - previous);
                        chartData.push({
                            x: filteredData[i].date,
                            y: daily
                        });
                    }
                }
                
                chartData = chartData.filter(d => d.x);

                return {
                    label: region.length > 40 ? region.substring(0, 40) + '...' : region,
                    data: chartData,
                    borderColor: color,
                    backgroundColor: color + '33',
                    tension: 0.1,
                    pointRadius: 2,
                    fill: false
                };
            });

            const chartConfig = {
                type: 'line',
                data: { datasets },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    interaction: {
                        intersect: false,
                        mode: 'index'
                    },
                    plugins: {
                        legend: {
                            labels: { 
                                color: '#ffffff',
                                usePointStyle: true,
                                padding: 20
                            }
                        },
                        tooltip: {
                            backgroundColor: 'rgba(0, 0, 0, 0.8)',
                            titleColor: '#ffffff',
                            bodyColor: '#ffffff',
                            borderColor: '#1e3a8a',
                            borderWidth: 1
                        }
                    },
                    scales: {
                        x: {
                            type: 'time',
                            time: {
                                unit: 'day',
                                displayFormats: {
                                    day: 'MMM dd, yyyy'
                                }
                            },
                            ticks: { 
                                color: '#ffffff',
                                maxTicksLimit: 10
                            },
                            grid: { color: '#333333' },
                            title: {
                                display: true,
                                text: 'Date',
                                color: '#ffffff'
                            }
                        },
                        y: {
                            ticks: { 
                                color: '#ffffff',
                                callback: function(value) {
                                    return value.toLocaleString();
                                }
                            },
                            grid: { color: '#333333' },
                            title: {
                                display: true,
                                text: cumulativeMode ? `Cumulative ${dataField}` : `Daily New ${dataField}`,
                                color: '#ffffff'
                            }
                        }
                    }
                }
            };

            try {
                charts[chartId] = new Chart(ctx, chartConfig);
                console.log(`Chart ${chartId} created successfully`);
            } catch (error) {
                console.error('Error creating chart:', error);
                chartPanel.innerHTML = `<h3>${title}</h3><p style="color: #ff6b6b; text-align: center; padding: 2rem;">Error creating chart: ${error.message}</p>`;
            }
        }

        function createBarChart(chartId, title, dataField, regions, dataType) {
            const chartsContainer = document.getElementById('chartsContainer');
            
            const chartPanel = document.createElement('div');
            chartPanel.className = 'chart-panel';
            chartPanel.innerHTML = `
                <h3>${title}</h3>
                <div class="chart-container">
                    <canvas id="${chartId}"></canvas>
                </div>
            `;
            chartsContainer.appendChild(chartPanel);

            const ctx = document.getElementById(chartId).getContext('2d');
            
            const datasets = regions.map((region, index) => {
                const regionData = getRegionData(region, dataType);
                const colors = ['#3b82f6', '#ef4444', '#10b981', '#f59e0b', '#8b5cf6', '#ec4899', '#14b8a6', '#f97316'];
                const color = colors[index % colors.length];

                let value = 0;
                if (regionData.length > 0) {
                    const data = regionData[0];
                    if (dataType === 'colleges') {
                        value = data.cases || 0;
                    } else if (dataType.startsWith('prisons')) {
                        value = (data.total_inmate_cases || 0) + (data.total_officer_cases || 0);
                    }
                }

                return {
                    label: region.length > 30 ? region.substring(0, 30) + '...' : region,
                    data: [value],
                    backgroundColor: color,
                    borderColor: color,
                    borderWidth: 1
                };
            });

            const chartConfig = {
                type: 'bar',
                data: {
                    labels: ['Cases'],
                    datasets: datasets
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            labels: { 
                                color: '#ffffff',
                                padding: 20
                            }
                        },
                        tooltip: {
                            backgroundColor: 'rgba(0, 0, 0, 0.8)',
                            titleColor: '#ffffff',
                            bodyColor: '#ffffff',
                            borderColor: '#1e3a8a',
                            borderWidth: 1
                        }
                    },
                    scales: {
                        x: {
                            ticks: { color: '#ffffff' },
                            grid: { color: '#333333' }
                        },
                        y: {
                            ticks: { 
                                color: '#ffffff',
                                callback: function(value) {
                                    return value.toLocaleString();
                                }
                            },
                            grid: { color: '#333333' },
                            title: {
                                display: true,
                                text: 'Total Cases',
                                color: '#ffffff'
                            }
                        }
                    }
                }
            };

            try {
                charts[chartId] = new Chart(ctx, chartConfig);
                console.log(`Chart ${chartId} created successfully`);
            } catch (error) {
                console.error('Error creating chart:', error);
                chartPanel.innerHTML = `<h3>${title}</h3><p style="color: #ff6b6b; text-align: center; padding: 2rem;">Error creating chart: ${error.message}</p>`;
            }
        }

        function createMixedComparisonChart() {
            const chartsContainer = document.getElementById('chartsContainer');
            
            const chartPanel = document.createElement('div');
            chartPanel.className = 'chart-panel';
            chartPanel.innerHTML = `
                <h3>Mixed Data Types - Normalized Comparison</h3>
                <div class="chart-container">
                    <canvas id="mixed-comparison"></canvas>
                </div>
            `;
            chartsContainer.appendChild(chartPanel);

            const ctx = document.getElementById('mixed-comparison').getContext('2d');
            
            const datasets = selectedRegions.map((region, index) => {
                const dataType = selectedDataTypes[index];
                const regionData = getRegionData(region, dataType);
                const colors = ['#3b82f6', '#ef4444', '#10b981', '#f59e0b', '#8b5cf6', '#ec4899', '#14b8a6', '#f97316'];
                const color = colors[index % colors.length];

                let value = 0;
                if (regionData.length > 0) {
                    if (dataType === 'us-states' || dataType === 'us-counties') {
                        const latestData = regionData[regionData.length - 1];
                        value = latestData.cases || 0;
                    } else if (dataType === 'colleges') {
                        value = regionData[0].cases || 0;
                    } else if (dataType.startsWith('prisons')) {
                        const data = regionData[0];
                        value = (data.total_inmate_cases || 0) + (data.total_officer_cases || 0);
                    }
                }

                return {
                    label: `${region} [${dataType.replace('-', ' ')}]`,
                    data: [value],
                    backgroundColor: color,
                    borderColor: color,
                    borderWidth: 1
                };
            });

            const chartConfig = {
                type: 'bar',
                data: {
                    labels: ['Total Cases'],
                    datasets: datasets
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            labels: { 
                                color: '#ffffff',
                                padding: 20
                            }
                        },
                        tooltip: {
                            backgroundColor: 'rgba(0, 0, 0, 0.8)',
                            titleColor: '#ffffff',
                            bodyColor: '#ffffff',
                            borderColor: '#1e3a8a',
                            borderWidth: 1
                        }
                    },
                    scales: {
                        x: {
                            ticks: { color: '#ffffff' },
                            grid: { color: '#333333' }
                        },
                        y: {
                            type: 'logarithmic',
                            ticks: { 
                                color: '#ffffff',
                                callback: function(value) {
                                    return value.toLocaleString();
                                }
                            },
                            grid: { color: '#333333' },
                            title: {
                                display: true,
                                text: 'Total Cases (Log Scale)',
                                color: '#ffffff'
                            }
                        }
                    }
                }
            };

            try {
                charts['mixed-comparison'] = new Chart(ctx, chartConfig);
                console.log('Mixed comparison chart created successfully');
            } catch (error) {
                console.error('Error creating mixed comparison chart:', error);
                chartPanel.innerHTML = `<h3>Mixed Data Types - Normalized Comparison</h3><p style="color: #ff6b6b; text-align: center; padding: 2rem;">Error creating chart: ${error.message}</p>`;
            }
        }

        function getRegionData(region, dataType) {
            const currentData = allDataSets[dataType];
            if (!currentData) return [];
            
            if (dataType === 'us-states') {
                return currentData.filter(d => d.state === region).sort((a, b) => new Date(a.date) - new Date(b.date));
            } else if (dataType === 'us-counties') {
                const [county, state] = region.split(', ');
                return currentData.filter(d => d.county === county && d.state === state).sort((a, b) => new Date(a.date) - new Date(b.date));
            } else if (dataType === 'colleges') {
                const collegeName = region.split(' (')[0];
                return currentData.filter(d => d.college === collegeName);
            } else if (dataType === 'prisons-facilities') {
                const facilityName = region.split(' (')[0];
                return currentData.filter(d => d.facility_name === facilityName);
            } else if (dataType === 'prisons-systems') {
                return currentData.filter(d => (d.state || d.system) === region);
            } else if (dataType === 'excess-deaths') {
                if (region.includes(', ')) {
                    const [place, country] = region.split(', ');
                    return currentData.filter(d => d.placename === place && d.country === country);
                } else {
                    return currentData.filter(d => d.country === region && !d.placename);
                }
            }
            
            return [];
        }

        function clearCharts() {
            Object.values(charts).forEach(chart => {
                try {
                    chart.destroy();
                } catch (e) {
                    console.warn('Error destroying chart:', e);
                }
            });
            charts = {};
        }

        function showError(message) {
            const container = document.querySelector('.container');
            const existingError = document.querySelector('.error');
            if (existingError) {
                existingError.remove();
            }
            
            const errorDiv = document.createElement('div');
            errorDiv.className = 'error';
            errorDiv.textContent = message;
            container.insertBefore(errorDiv, container.firstChild);
            
            setTimeout(() => {
                if (errorDiv.parentNode) {
                    errorDiv.remove();
                }
            }, 10000);
        }

        function showLoading(show) {
            document.getElementById('loadingIndicator').style.display = show ? 'block' : 'none';
        }

        // Initialize the application
        document.addEventListener('DOMContentLoaded', function() {
            console.log('COVID-19 Data Dashboard initialized');
            console.log('Libraries loaded:', {
                Chart: typeof Chart !== 'undefined',
                Papa: typeof Papa !== 'undefined'
            });
            
            // Set default date range
            const startDate = document.getElementById('startDate');
            const endDate = document.getElementById('endDate');
            startDate.value = '2020-03-01';
            endDate.value = '2023-03-23';
        });

        // Window resize handler for responsive charts
        window.addEventListener('resize', function() {
            Object.values(charts).forEach(chart => {
                try {
                    chart.resize();
                } catch (e) {
                    console.warn('Error resizing chart:', e);
                }
            });
        });
    </script>
</body>
</html>